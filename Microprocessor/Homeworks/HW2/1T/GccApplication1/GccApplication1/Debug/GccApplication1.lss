
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000f4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000124  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000160  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000584  00000000  00000000  00000188  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001dd  00000000  00000000  00000c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f2  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000003c  00000000  00000000  00001132  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000116e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 36 00 	jmp	0x6c	; 0x6c <__vector_14>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 44 00 	call	0x88	; 0x88 <main>
  64:	0c 94 4e 00 	jmp	0x9c	; 0x9c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <__vector_14>:

#include <avr/io.h>
#include <avr/interrupt.h>

ISR(USART_UDRE_vect)
{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	8f 93       	push	r24
	UDR = 'M';	       //H=48 --> 0100 1000
  78:	8d e4       	ldi	r24, 0x4D	; 77
  7a:	8c b9       	out	0x0c, r24	; 12
}
  7c:	8f 91       	pop	r24
  7e:	0f 90       	pop	r0
  80:	0f be       	out	0x3f, r0	; 63
  82:	0f 90       	pop	r0
  84:	1f 90       	pop	r1
  86:	18 95       	reti

00000088 <main>:


int main(void)
{
	
	DDRB = 0xFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
	UCSRB =(1<<TXEN) | (1<<UDRIE);
  8c:	88 e2       	ldi	r24, 0x28	; 40
  8e:	8a b9       	out	0x0a, r24	; 10
	UCSRC =(1<<UCSZ1) | (1<<UCSZ0) | (1<<URSEL) | (1<<UMSEL) | (1<<UCPOL);
  90:	87 ec       	ldi	r24, 0xC7	; 199
  92:	80 bd       	out	0x20, r24	; 32
	UBRRL = 0X33;
  94:	83 e3       	ldi	r24, 0x33	; 51
  96:	89 b9       	out	0x09, r24	; 9

	sei();
  98:	78 94       	sei
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x12>

0000009c <_exit>:
  9c:	f8 94       	cli

0000009e <__stop_program>:
  9e:	ff cf       	rjmp	.-2      	; 0x9e <__stop_program>
