
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b0  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000511  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000251  00000000  00000000  00000cd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00000f24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000307  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000c1  00000000  00000000  000012b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001374  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__vector_1>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 4e 00 	jmp	0x9c	; 0x9c <__vector_11>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/interrupt.h>


int main(void)
{
	PORTC=0;
  6c:	15 ba       	out	0x15, r1	; 21
	DDRC = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	84 bb       	out	0x14, r24	; 20
	DDRD |= (1 << PD4) | (1 << PD2) | (1 << PD3);
  72:	81 b3       	in	r24, 0x11	; 17
  74:	8c 61       	ori	r24, 0x1C	; 28
  76:	81 bb       	out	0x11, r24	; 17
	 
	TCNT0 = -8;             //1 , 8MHz
  78:	88 ef       	ldi	r24, 0xF8	; 248
  7a:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01;
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	83 bf       	out	0x33, r24	; 51
	TIMSK |= (1<<TOIE0);
  80:	89 b7       	in	r24, 0x39	; 57
  82:	81 60       	ori	r24, 0x01	; 1
  84:	89 bf       	out	0x39, r24	; 57
	MCUCR |= (1 << ISC01) | (1 << ISC11);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	8a 60       	ori	r24, 0x0A	; 10
  8a:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1);
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 6c       	ori	r24, 0xC0	; 192
  90:	8b bf       	out	0x3b, r24	; 59
	GIFR |= (1 << INTF0) | (1 << INTF1);
  92:	8a b7       	in	r24, 0x3a	; 58
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	8a bf       	out	0x3a, r24	; 58
	sei();
  98:	78 94       	sei
  9a:	ff cf       	rjmp	.-2      	; 0x9a <main+0x2e>

0000009c <__vector_11>:
	
	while (1){}
	
}

ISR(TIMER0_OVF_vect){
  9c:	1f 92       	push	r1
  9e:	0f 92       	push	r0
  a0:	0f b6       	in	r0, 0x3f	; 63
  a2:	0f 92       	push	r0
  a4:	11 24       	eor	r1, r1
  a6:	8f 93       	push	r24
  a8:	9f 93       	push	r25
	if (PORTC >100 && PORTC<200) {
  aa:	85 b3       	in	r24, 0x15	; 21
  ac:	85 36       	cpi	r24, 0x65	; 101
  ae:	48 f0       	brcs	.+18     	; 0xc2 <__vector_11+0x26>
  b0:	85 b3       	in	r24, 0x15	; 21
  b2:	88 3c       	cpi	r24, 0xC8	; 200
  b4:	30 f4       	brcc	.+12     	; 0xc2 <__vector_11+0x26>
		TCNT0 = -8;
  b6:	88 ef       	ldi	r24, 0xF8	; 248
  b8:	82 bf       	out	0x32, r24	; 50
		PORTD ^= 0b00010000;
  ba:	92 b3       	in	r25, 0x12	; 18
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	89 27       	eor	r24, r25
  c0:	82 bb       	out	0x12, r24	; 18
	}
}
  c2:	9f 91       	pop	r25
  c4:	8f 91       	pop	r24
  c6:	0f 90       	pop	r0
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	0f 90       	pop	r0
  cc:	1f 90       	pop	r1
  ce:	18 95       	reti

000000d0 <__vector_1>:

ISR(INT0_vect) {
  d0:	1f 92       	push	r1
  d2:	0f 92       	push	r0
  d4:	0f b6       	in	r0, 0x3f	; 63
  d6:	0f 92       	push	r0
  d8:	11 24       	eor	r1, r1
  da:	8f 93       	push	r24
	PORTC++;
  dc:	85 b3       	in	r24, 0x15	; 21
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	85 bb       	out	0x15, r24	; 21
}
  e2:	8f 91       	pop	r24
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_2>:

ISR(INT1_vect) {
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	8f 93       	push	r24
	if (PORTC > 0) {
  fa:	85 b3       	in	r24, 0x15	; 21
  fc:	88 23       	and	r24, r24
  fe:	19 f0       	breq	.+6      	; 0x106 <__vector_2+0x18>
		PORTC--;
 100:	85 b3       	in	r24, 0x15	; 21
 102:	81 50       	subi	r24, 0x01	; 1
 104:	85 bb       	out	0x15, r24	; 21
	}
}
 106:	8f 91       	pop	r24
 108:	0f 90       	pop	r0
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	0f 90       	pop	r0
 10e:	1f 90       	pop	r1
 110:	18 95       	reti

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
