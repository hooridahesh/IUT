# -*- coding: utf-8 -*-
"""HW3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kLnOMmbaD0Twlufzg_CTOi9ut9vr5S7K

# **5-1**
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd

dataframe=pd.read_csv('/content/drive/MyDrive/Social_Network_Ads.csv')
dataframe.head()

"""# **5-2**

"""

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()
dataframe['Gender'] = label_encoder.fit_transform(dataframe['Gender'])
dataframe.head()

"""# **5-3**

"""

x = dataframe.iloc[:, 1:4]
y = dataframe.iloc[:,4:5]

print("X variable:\n",x)
print("\nY variable:\n",y)

"""# **5-4**

"""

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.3, random_state=1)

print("ابعاد مجموعه آموزشی:")
print(x_train.shape, y_train.shape)
print("ابعاد مجموعه تست:")
print(x_test.shape, y_test.shape)

"""# **5-5**

"""

from sklearn.tree import DecisionTreeClassifier

classifier = DecisionTreeClassifier(random_state=0)

classifier.fit(x_train,y_train)

"""# **5-6**

"""

y_pred_test = classifier.predict(x_test)

y_pred_train = classifier.predict(x_train)

print("y_pred_test:\n",y_pred_test)

print("\n****************************************************************************************\n")

print("y_pred_train:\n",y_pred_train)

"""# **5-7**

"""

from sklearn.metrics import accuracy_score

accuracy_test = accuracy_score(y_test, y_pred_test)

accuracy_train = accuracy_score(y_train, y_pred_train)

print("Train Accuracy:", accuracy_train)

print("\nTest Accuracy:", accuracy_test)

"""# **5-8**

"""

from sklearn.tree import plot_tree
import matplotlib.pyplot as plt

plt.figure(figsize=(25, 20))
plot_tree(classifier, filled=True, feature_names=x.columns, class_names=["Not Purchased", "Purchased"])
plt.show()

"""# **5-9**

"""

import numpy as np

def generate_random_input():
    gender = np.random.randint(0, 1)
    age = np.random.randint(18, 90)
    estimated_salary = np.random.randint(15000, 100000)

    return pd.DataFrame([[gender, age, estimated_salary]], columns=['Gender', 'Age', 'EstimatedSalary'])


input_data = generate_random_input()

predicted_purchased = classifier.predict(input_data)

print(input_data)
print("\nPurchased:",predicted_purchased)

"""# **5-11**

"""

from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import KFold

CV = KFold(n_splits=10, random_state=100, shuffle=True)

def GrdSrch_Tune(model, X, y, params):
    clf = GridSearchCV(model, params, scoring ='accuracy', cv = CV, n_jobs=-1)
    clf.fit(X, y)

    print("best score is :" , clf.best_score_)
    print("best estimator is :" , clf.best_estimator_)
    print("best Params is :" , clf.best_params_)

    return (clf.best_score_)

param_DT = {'criterion':['gini', 'entropy', 'log_loss'] ,
            'splitter':['best', 'random'] ,
            'max_depth':[None,3,4,5,6] ,
            'min_samples_split':[2,3,4,5,6] ,
            'min_samples_leaf':[2,3,4,5,6]}


GrdSrch_Tune(DecisionTreeClassifier(random_state = 0), x_train, y_train, param_DT)

classifier2 = DecisionTreeClassifier(criterion='entropy', max_depth=3, min_samples_leaf=6,random_state=0)

classifier2.fit(x_train, y_train)

y_pred_train = classifier2.predict(x_train)

y_pred_test = classifier2.predict(x_test)

accuracy_train = accuracy_score(y_train, y_pred_train)

accuracy_test = accuracy_score(y_test, y_pred_test)

print("Train Accuracy:", accuracy_train)
print("\nTest Accuracy:", accuracy_test)

