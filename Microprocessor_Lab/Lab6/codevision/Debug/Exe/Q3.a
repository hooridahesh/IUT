;#include <headers.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;long int duty, oldDuty, ocr;
;
;void init_Q3()
; 0003 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0003 0007 
; 0003 0008 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0003 0009 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0003 000A 
; 0003 000B // Timer/Counter 0 initialization
; 0003 000C // Clock source: System Clock
; 0003 000D // Clock value: 1000.000 kHz
; 0003 000E // Mode: Phase correct PWM top=0xFF
; 0003 000F // OC0 output: Non-Inverted PWM
; 0003 0010 // Timer Period: 0.51 ms
; 0003 0011 // Output Pulse(s):
; 0003 0012 // OC0 Period: 0.51 ms Width: 0.102 ms
; 0003 0013 TCCR0=(1<<WGM00) | (1<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (0<<CS00);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0003 0014 TCNT0=0x00;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0003 0015 
; 0003 0016 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0003 0017 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0003 0018 
; 0003 0019 oldDuty = ((adc_data[0]*100) / 1024);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0003 001A duty = oldDuty;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0003 001B ocr = (2.5348 * duty) + 0.8484;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0003 001C OCR0 = ocr;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0003 001D 
; 0003 001E // ADC initialization
; 0003 001F // ADC Clock frequency: 1000.000 kHz
; 0003 0020 // ADC Voltage Reference: AVCC pin
; 0003 0021 // ADC Auto Trigger Source: ADC Stopped
; 0003 0022 ADMUX=FIRST_ADC_INPUT | ADC_VREF_TYPE;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0003 0023 ADCSRA=(1<<ADEN) | (1<<ADSC) | (0<<ADATE) | (0<<ADIF) | (1<<ADIE) | (0<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0003 0024 SFIOR=(0<<ADTS2) | (0<<ADTS1) | (0<<ADTS0);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0003 0025 
; 0003 0026 
; 0003 0027 // Alphanumeric LCD initialization
; 0003 0028 // Connections are specified in the
; 0003 0029 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0003 002A // RS - PORTC Bit 0
; 0003 002B // RD - PORTC Bit 1
; 0003 002C // EN - PORTC Bit 2
; 0003 002D // D4 - PORTC Bit 4
; 0003 002E // D5 - PORTC Bit 5
; 0003 002F // D6 - PORTC Bit 6
; 0003 0030 // D7 - PORTC Bit 7
; 0003 0031 // Characters/line: 16
; 0003 0032 lcd_init(16);
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0003 0033 
; 0003 0034 // Global enable interrupts
; 0003 0035 #asm("sei")
;PCODE: $00000035 VOL: 0
	sei
;PCODE: $00000036 VOL: 0
; 0003 0036 }
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;
;void subTask3(void)
; 0003 0039 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0003 003A     duty = ((adc_data[0]*100) / 1024);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0003 003B     if((duty > (1.05*oldDuty)) || (duty < (0.95*oldDuty)))
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0003 003C     {
; 0003 003D         oldDuty = ((adc_data[0]*100) / 1024);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0003 003E         duty = oldDuty;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0003 003F         ocr = (2.5348 * duty) + 0.8484;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0003 0040         OCR0 = ocr;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0003 0041     }
; 0003 0042 }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
