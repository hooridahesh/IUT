
AVRASM ver. 2.1.30  D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm Sun Apr 09 22:22:13 2023

D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1088): warning: Register r5 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1089): warning: Register r6 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1090): warning: Register r7 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1091): warning: Register r8 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1093): warning: Register r10 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1094): warning: Register r11 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1095): warning: Register r12 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1096): warning: Register r13 already defined by the .DEF directive
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1097): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _timerStatus=R5
                 	.DEF _hour=R6
                 	.DEF _hour_msb=R7
                 	.DEF _minute=R8
                 	.DEF _minute_msb=R9
                 	.DEF _second=R10
                 	.DEF _second_msb=R11
                 	.DEF _hundredthOfSecond=R12
                 	.DEF _hundredthOfSecond_msb=R13
                 	.DEF _timerCounter=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 005e 	JMP  __RESET
000002 940c 0091 	JMP  _ext_int0_isr
000004 940c 0095 	JMP  _ext_int1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 00ab 	JMP  _timer1_ovf_isr
000012 940c 00a5 	JMP  _timer0_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0099 	JMP  _ext_int2_isr
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0000
000034 0000      	.DB  0x0,0x0,0x0,0x0
000035 0000
000036 0000      	.DB  0x0,0x0,0x0,0x0
000037 0000      	.DB  0x0,0x0
                 
                 _0x20003:
000038 03e8      	.DB  0xE8,0x3
                 _0x20004:
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1143): warning: .cseg .db misalignment - padding zero byte
000039 00ff      	.DB  0xFF
                 _0x20000:
00003a 3025
00003b 6432
00003c 253a
00003d 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
00003e 3a64
00003f 3025
000040 6432
000041 253a      	.DB  0x64,0x3A,0x25,0x30,0x32,0x64,0x3A,0x25
000042 3230
000043 0064
000044 5546
000045 4c4c      	.DB  0x30,0x32,0x64,0x0,0x46,0x55,0x4C,0x4C
000046 2500
000047 6434
000048 2500
000049 6434      	.DB  0x0,0x25,0x34,0x64,0x0,0x25,0x34,0x64
00004a 534d
00004b 0030
00004c 3425
00004d 5564      	.DB  0x4D,0x53,0x30,0x0,0x25,0x34,0x64,0x55
00004e 3053
D:\term8\AzMicro\HW\HW4\codevision\Debug\List\az4.asm(1150): warning: .cseg .db misalignment - padding zero byte
00004f 0000      	.DB  0x53,0x30,0x0
                 _0x2020003:
000050 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000051 000a      	.DW  0x0A
000052 0004      	.DW  0x04
000053 0066      	.DW  __REG_VARS*2
                 
000054 0002      	.DW  0x02
000055 0160      	.DW  _emptyCapacity
000056 0070      	.DW  _0x20003*2
                 
000057 0001      	.DW  0x01
000058 0162      	.DW  _period
000059 0072      	.DW  _0x20004*2
                 
00005a 0002      	.DW  0x02
00005b 0166      	.DW  __base_y_G101
00005c 00a0      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00005d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00005e 94f8      	CLI
00005f 27ee      	CLR  R30
000060 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000061 e0f1      	LDI  R31,1
000062 bffb      	OUT  GICR,R31
000063 bfeb      	OUT  GICR,R30
000064 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000065 e08d      	LDI  R24,(14-2)+1
000066 e0a2      	LDI  R26,2
000067 27bb      	CLR  R27
                 __CLEAR_REG:
000068 93ed      	ST   X+,R30
000069 958a      	DEC  R24
00006a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00006b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006c e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00006e 93ed      	ST   X+,R30
00006f 9701      	SBIW R24,1
000070 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000071 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000072 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000073 9185      	LPM  R24,Z+
000074 9195      	LPM  R25,Z+
000075 9700      	SBIW R24,0
000076 f061      	BREQ __GLOBAL_INI_END
000077 91a5      	LPM  R26,Z+
000078 91b5      	LPM  R27,Z+
000079 9005      	LPM  R0,Z+
00007a 9015      	LPM  R1,Z+
00007b 01bf      	MOVW R22,R30
00007c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007d 9005      	LPM  R0,Z+
00007e 920d      	ST   X+,R0
00007f 9701      	SBIW R24,1
000080 f7e1      	BRNE __GLOBAL_INI_LOOP
000081 01fb      	MOVW R30,R22
000082 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 008b 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005 // Declare your local variables here
                 ; 0000 0006 
                 ; 0000 0007 init();
00008b d173      	RCALL _init
                 ; 0000 0008 DDRC = 0x00;
00008c e0e0      	LDI  R30,LOW(0)
00008d bbe4      	OUT  0x14,R30
                 ; 0000 0009 
                 ; 0000 000A // Global enable interrupts
                 ; 0000 000B #asm("sei")
00008e 9478      	sei
                 ; 0000 000C 
                 ; 0000 000D while (1)
                 _0x3:
                 ; 0000 000E       {
                 ; 0000 000F       // Place your code here
                 ; 0000 0010 
                 ; 0000 0011       }
00008f cfff      	RJMP _0x3
                 ; 0000 0012 }
                 _0x6:
000090 cfff      	RJMP _0x6
                 ; .FEND
                 ;
                 ;
                 ;#include <myheaders.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;
                 ;char timerStatus = 0;
                 ;int hour = 0;
                 ;int minute = 0;
                 ;int second = 0;
                 ;int hundredthOfSecond = 0;
                 ;char timerCounter = 0;
                 ;
                 ;//Q2
                 ;int emptyCapacity = 1000;
                 
                 	.DSEG
                 ;
                 ;//Q3
                 ;int period = 255;
                 ;int in_period;
                 ;
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ;{
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
000091 940e 049d 	CALL SUBOPT_0x0
                 ; 0001 0013 // Place your code here
                 ; 0001 0014 CarCap();
000093 d0a7      	RCALL _CarCap
                 ; 0001 0015 }
000094 c034      	RJMP _0x2001F
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0001 0019 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000095 940e 049d 	CALL SUBOPT_0x0
                 ; 0001 001A // Place your code here
                 ; 0001 001B startStopTimer();
000097 d03f      	RCALL _startStopTimer
                 ; 0001 001C }
000098 c030      	RJMP _0x2001F
                 ; .FEND
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void)
                 ; 0001 0020 {
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
000099 940e 049d 	CALL SUBOPT_0x0
                 ; 0001 0021 // Place your code here
                 ; 0001 0022 DDRA = 0x00;
00009b e0e0      	LDI  R30,LOW(0)
00009c bbea      	OUT  0x1A,R30
                 ; 0001 0023 period = PINA;
00009d b3e9      	IN   R30,0x19
00009e e0f0      	LDI  R31,0
00009f 93e0 0162 	STS  _period,R30
0000a1 93f0 0163 	STS  _period+1,R31
                 ; 0001 0024 createWave();
0000a3 d127      	RCALL _createWave
                 ; 0001 0025 }
0000a4 c024      	RJMP _0x2001F
                 ; .FEND
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0001 0029 {
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
0000a5 940e 049d 	CALL SUBOPT_0x0
                 ; 0001 002A // Reinitialize Timer 0 value
                 ; 0001 002B TCNT0=0x83;
0000a7 e8e3      	LDI  R30,LOW(131)
0000a8 bfe2      	OUT  0x32,R30
                 ; 0001 002C // Place your code here
                 ; 0001 002D showTime();
0000a9 d043      	RCALL _showTime
                 ; 0001 002E 
                 ; 0001 002F }
0000aa c01e      	RJMP _0x2001F
                 ; .FEND
                 ;
                 ;// Timer1 overflow interrupt service routine
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0001 0033 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
0000ab 940e 049d 	CALL SUBOPT_0x0
                 ; 0001 0034 // Reinitialize Timer1 value
                 ; 0001 0035 //TCNT1H=0x63C0 >> 8;
                 ; 0001 0036 //TCNT1L=0x63C0 & 0xff;
                 ; 0001 0037 
                 ; 0001 0038 int tcnt = calPeriod(period,0,255,1,10000) * 0.000001 * (1/2*8000000);
                 ; 0001 0039 //int tcnt = 1/2 * (1/period) * 8000000000;
                 ; 0001 003A TCNT1H = tcnt >> 8;
0000ad 931a      	ST   -Y,R17
0000ae 930a      	ST   -Y,R16
                 ;	tcnt -> R16,R17
0000af 940e 04ab 	CALL SUBOPT_0x1
0000b1 940e 0585 	CALL __CDF1
                +
0000b3 ebad     +LDI R26 , LOW ( 0x358637BD )
0000b4 e3b7     +LDI R27 , HIGH ( 0x358637BD )
0000b5 e886     +LDI R24 , BYTE3 ( 0x358637BD )
0000b6 e395     +LDI R25 , BYTE4 ( 0x358637BD )
                 	__GETD2N 0x358637BD
0000b7 940e 05b3 	CALL __MULF12
                +
0000b9 e0a0     +LDI R26 , LOW ( 0x0 )
0000ba e0b0     +LDI R27 , HIGH ( 0x0 )
0000bb e080     +LDI R24 , BYTE3 ( 0x0 )
0000bc e090     +LDI R25 , BYTE4 ( 0x0 )
                 	__GETD2N 0x0
0000bd 940e 05b3 	CALL __MULF12
0000bf 940e 054c 	CALL __CFD1U
0000c1 018f      	MOVW R16,R30
0000c2 940e 061b 	CALL __ASRW8
0000c4 bded      	OUT  0x2D,R30
                 ; 0001 003B TCNT1L = tcnt & 0xff;
0000c5 2fe0      	MOV  R30,R16
0000c6 bdec      	OUT  0x2C,R30
                 ; 0001 003C 
                 ; 0001 003D }
0000c7 9109      	LD   R16,Y+
0000c8 9119      	LD   R17,Y+
                 _0x2001F:
0000c9 91e9      	LD   R30,Y+
0000ca bfef      	OUT  SREG,R30
0000cb 91f9      	LD   R31,Y+
0000cc 91e9      	LD   R30,Y+
0000cd 91b9      	LD   R27,Y+
0000ce 91a9      	LD   R26,Y+
0000cf 9199      	LD   R25,Y+
0000d0 9189      	LD   R24,Y+
0000d1 9179      	LD   R23,Y+
0000d2 9169      	LD   R22,Y+
0000d3 90f9      	LD   R15,Y+
0000d4 9019      	LD   R1,Y+
0000d5 9009      	LD   R0,Y+
0000d6 9518      	RETI
                 ; .FEND
                 ;
                 ;void startStopTimer(void){
                 ; 0001 003F void startStopTimer(void){
                 _startStopTimer:
                 ; .FSTART _startStopTimer
                 ; 0001 0040     if(PINB.4 == 0){ //start
0000d7 99b4      	SBIC 0x16,4
0000d8 c003      	RJMP _0x20005
                 ; 0001 0041         timerStatus = 1;
0000d9 e0e1      	LDI  R30,LOW(1)
0000da 2e5e      	MOV  R5,R30
                 ; 0001 0042     }
                 ; 0001 0043     else if(PINB.5 == 0 && timerStatus == 1){ //stop
0000db c010      	RJMP _0x20006
                 _0x20005:
0000dc 99b5      	SBIC 0x16,5
0000dd c003      	RJMP _0x20008
0000de e0e1      	LDI  R30,LOW(1)
0000df 15e5      	CP   R30,R5
0000e0 f009      	BREQ _0x20009
                 _0x20008:
0000e1 c002      	RJMP _0x20007
                 _0x20009:
                 ; 0001 0044         timerStatus = 0;
0000e2 2455      	CLR  R5
                 ; 0001 0045     }
                 ; 0001 0046     else{ //reset
0000e3 c008      	RJMP _0x2000A
                 _0x20007:
                 ; 0001 0047         hundredthOfSecond = 0;
0000e4 24cc      	CLR  R12
0000e5 24dd      	CLR  R13
                 ; 0001 0048         second = 0;
0000e6 24aa      	CLR  R10
0000e7 24bb      	CLR  R11
                 ; 0001 0049         minute = 0;
0000e8 2488      	CLR  R8
0000e9 2499      	CLR  R9
                 ; 0001 004A         hour = 0;
0000ea 2466      	CLR  R6
0000eb 2477      	CLR  R7
                 ; 0001 004B     }
                 _0x2000A:
                 _0x20006:
                 ; 0001 004C }
0000ec 9508      	RET
                 ; .FEND
                 ;
                 ;void showTime(void){
                 ; 0001 004E void showTime(void){
                 _showTime:
                 ; .FSTART _showTime
                 ; 0001 004F     char lcdTimer[17];
                 ; 0001 0050 
                 ; 0001 0051     // count 10 to reach 10ms
                 ; 0001 0052     if (timerCounter != 10)
0000ed 9761      	SBIW R28,17
                 ;	lcdTimer -> Y+0
0000ee e0ea      	LDI  R30,LOW(10)
0000ef 15e4      	CP   R30,R4
0000f0 f011      	BREQ _0x2000B
                 ; 0001 0053     {
                 ; 0001 0054         timerCounter++;
0000f1 9443      	INC  R4
                 ; 0001 0055     }
                 ; 0001 0056     else
0000f2 c005      	RJMP _0x2000C
                 _0x2000B:
                 ; 0001 0057     {
                 ; 0001 0058         timerCounter = 0;
0000f3 2444      	CLR  R4
                 ; 0001 0059         if(timerStatus == 1){
0000f4 e0e1      	LDI  R30,LOW(1)
0000f5 15e5      	CP   R30,R5
0000f6 f409      	BRNE _0x2000D
                 ; 0001 005A             calTime();
0000f7 d01a      	RCALL _calTime
                 ; 0001 005B         }
                 ; 0001 005C     }
                 _0x2000D:
                 _0x2000C:
                 ; 0001 005D 
                 ; 0001 005E     sprintf(lcdTimer, "%02d:%02d:%02d:%02d", hour, minute, second, hundredthOfSecond);
0000f8 940e 04cb 	CALL SUBOPT_0x2
                +
0000fa e7e4     +LDI R30 , LOW ( 2 * _0x20000 + ( 0 ) )
0000fb e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 0 ) )
                 	__POINTW1FN _0x20000,0
0000fc 93fa      	ST   -Y,R31
0000fd 93ea      	ST   -Y,R30
0000fe 01f3      	MOVW R30,R6
0000ff 940e 04cf 	CALL SUBOPT_0x3
000101 01f4      	MOVW R30,R8
000102 940e 04cf 	CALL SUBOPT_0x3
000104 01f5      	MOVW R30,R10
000105 940e 04cf 	CALL SUBOPT_0x3
000107 01f6      	MOVW R30,R12
000108 940e 04cf 	CALL SUBOPT_0x3
00010a e180      	LDI  R24,16
00010b 940e 03b1 	CALL _sprintf
00010d 9664      	ADIW R28,20
                 ; 0001 005F     lcd_gotoxy(0, 0);
00010e e0e0      	LDI  R30,LOW(0)
00010f 93ea      	ST   -Y,R30
000110 e0a0      	LDI  R26,LOW(0)
000111 c0e6      	RJMP _0x2080003
                 ; 0001 0060     //lcd_clear();
                 ; 0001 0061     lcd_puts(lcdTimer);
                 ; 0001 0062 }
                 ; .FEND
                 ;
                 ;void calTime(void)
                 ; 0001 0065 {
                 _calTime:
                 ; .FSTART _calTime
                 ; 0001 0066     hundredthOfSecond++;
000112 01f6      	MOVW R30,R12
000113 9631      	ADIW R30,1
000114 016f      	MOVW R12,R30
                 ; 0001 0067     if (hundredthOfSecond > 99)
000115 e6e3      	LDI  R30,LOW(99)
000116 e0f0      	LDI  R31,HIGH(99)
000117 15ec      	CP   R30,R12
000118 05fd      	CPC  R31,R13
000119 f504      	BRGE _0x2000E
                 ; 0001 0068     {
                 ; 0001 0069         hundredthOfSecond = 0;
00011a 24cc      	CLR  R12
00011b 24dd      	CLR  R13
                 ; 0001 006A         second++;
00011c 01f5      	MOVW R30,R10
00011d 9631      	ADIW R30,1
00011e 015f      	MOVW R10,R30
                 ; 0001 006B         if (second > 59)
00011f e3eb      	LDI  R30,LOW(59)
000120 e0f0      	LDI  R31,HIGH(59)
000121 15ea      	CP   R30,R10
000122 05fb      	CPC  R31,R11
000123 f4b4      	BRGE _0x2000F
                 ; 0001 006C         {
                 ; 0001 006D             second = 0;
000124 24aa      	CLR  R10
000125 24bb      	CLR  R11
                 ; 0001 006E             minute++ ;
000126 01f4      	MOVW R30,R8
000127 9631      	ADIW R30,1
000128 014f      	MOVW R8,R30
                 ; 0001 006F             if (minute > 59)
000129 e3eb      	LDI  R30,LOW(59)
00012a e0f0      	LDI  R31,HIGH(59)
00012b 15e8      	CP   R30,R8
00012c 05f9      	CPC  R31,R9
00012d f464      	BRGE _0x20010
                 ; 0001 0070             {
                 ; 0001 0071                 minute = 0;
00012e 2488      	CLR  R8
00012f 2499      	CLR  R9
                 ; 0001 0072                 hour++;
000130 01f3      	MOVW R30,R6
000131 9631      	ADIW R30,1
000132 013f      	MOVW R6,R30
                 ; 0001 0073                 if (hour > 99)
000133 e6e3      	LDI  R30,LOW(99)
000134 e0f0      	LDI  R31,HIGH(99)
000135 15e6      	CP   R30,R6
000136 05f7      	CPC  R31,R7
000137 f414      	BRGE _0x20011
                 ; 0001 0074                 {
                 ; 0001 0075                     hour = 0;
000138 2466      	CLR  R6
000139 2477      	CLR  R7
                 ; 0001 0076                 }
                 ; 0001 0077             }
                 _0x20011:
                 ; 0001 0078 
                 ; 0001 0079         }
                 _0x20010:
                 ; 0001 007A 
                 ; 0001 007B     }
                 _0x2000F:
                 ; 0001 007C }
                 _0x2000E:
00013a 9508      	RET
                 ; .FEND
                 ;
                 ;void CarCap(void){
                 ; 0001 007E void CarCap(void){
                 _CarCap:
                 ; .FSTART _CarCap
                 ; 0001 007F     char capMessage[16];
                 ; 0001 0080     //counter++;
                 ; 0001 0081     DDRB = DDRB & 0b01110111;
00013b 9760      	SBIW R28,16
                 ;	capMessage -> Y+0
00013c b3e7      	IN   R30,0x17
00013d 77e7      	ANDI R30,LOW(0x77)
00013e bbe7      	OUT  0x17,R30
                 ; 0001 0082 
                 ; 0001 0083     if(PINB.7 == 0 && emptyCapacity > 0){
00013f 99b7      	SBIC 0x16,7
000140 c007      	RJMP _0x20013
000141 91a0 0160 	LDS  R26,_emptyCapacity
000143 91b0 0161 	LDS  R27,_emptyCapacity+1
000145 940e 06d2 	CALL __CPW02
000147 f00c      	BRLT _0x20014
                 _0x20013:
000148 c006      	RJMP _0x20012
                 _0x20014:
                 ; 0001 0084         emptyCapacity--; //car in
000149 e6a0      	LDI  R26,LOW(_emptyCapacity)
00014a e0b1      	LDI  R27,HIGH(_emptyCapacity)
00014b 91ed      	LD   R30,X+
00014c 91fd      	LD   R31,X+
00014d 9731      	SBIW R30,1
00014e c010      	RJMP _0x2001D
                 ; 0001 0085     }
                 ; 0001 0086     else if(PINB.3 == 0 && emptyCapacity < 1000){
                 _0x20012:
00014f 99b3      	SBIC 0x16,3
000150 c008      	RJMP _0x20017
000151 91a0 0160 	LDS  R26,_emptyCapacity
000153 91b0 0161 	LDS  R27,_emptyCapacity+1
000155 3ea8      	CPI  R26,LOW(0x3E8)
000156 e0e3      	LDI  R30,HIGH(0x3E8)
000157 07be      	CPC  R27,R30
000158 f00c      	BRLT _0x20018
                 _0x20017:
000159 c007      	RJMP _0x20016
                 _0x20018:
                 ; 0001 0087         emptyCapacity++; //car out
00015a e6a0      	LDI  R26,LOW(_emptyCapacity)
00015b e0b1      	LDI  R27,HIGH(_emptyCapacity)
00015c 91ed      	LD   R30,X+
00015d 91fd      	LD   R31,X+
00015e 9631      	ADIW R30,1
                 _0x2001D:
00015f 93fe      	ST   -X,R31
000160 93ee      	ST   -X,R30
                 ; 0001 0088     }
                 ; 0001 0089 
                 ; 0001 008A 
                 ; 0001 008B     if (emptyCapacity == 0)
                 _0x20016:
000161 91e0 0160 	LDS  R30,_emptyCapacity
000163 91f0 0161 	LDS  R31,_emptyCapacity+1
000165 9730      	SBIW R30,0
000166 f459      	BRNE _0x20019
                 ; 0001 008C     {
                 ; 0001 008D         sprintf(capMessage, "FULL");
000167 940e 04cb 	CALL SUBOPT_0x2
                +
000169 e8e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 20 ) )
00016a e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 20 ) )
                 	__POINTW1FN _0x20000,20
00016b 93fa      	ST   -Y,R31
00016c 93ea      	ST   -Y,R30
00016d e080      	LDI  R24,0
00016e 940e 03b1 	CALL _sprintf
000170 9624      	ADIW R28,4
                 ; 0001 008E     }
                 ; 0001 008F     else
000171 c010      	RJMP _0x2001A
                 _0x20019:
                 ; 0001 0090     {
                 ; 0001 0091         sprintf(capMessage, "%4d", emptyCapacity);
000172 940e 04cb 	CALL SUBOPT_0x2
                +
000174 e8ed     +LDI R30 , LOW ( 2 * _0x20000 + ( 25 ) )
000175 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 25 ) )
                 	__POINTW1FN _0x20000,25
000176 93fa      	ST   -Y,R31
000177 93ea      	ST   -Y,R30
000178 91e0 0160 	LDS  R30,_emptyCapacity
00017a 91f0 0161 	LDS  R31,_emptyCapacity+1
00017c 940e 04cf 	CALL SUBOPT_0x3
00017e e084      	LDI  R24,4
00017f 940e 03b1 	CALL _sprintf
000181 9628      	ADIW R28,8
                 ; 0001 0092     }
                 _0x2001A:
                 ; 0001 0093 
                 ; 0001 0094     lcd_gotoxy(0, 1);
000182 e0e0      	LDI  R30,LOW(0)
000183 93ea      	ST   -Y,R30
000184 e0a1      	LDI  R26,LOW(1)
000185 940e 0405 	CALL _lcd_gotoxy
                 ; 0001 0095     //lcd_clear();
                 ; 0001 0096     lcd_puts(capMessage);
000187 01de      	MOVW R26,R28
000188 940e 0444 	CALL _lcd_puts
                 ; 0001 0097     //lcd_gotoxy(0, 1);
                 ; 0001 0098     //sprintf(capMessage, "%d", counter);
                 ; 0001 0099     //lcd_puts(capMessage);
                 ; 0001 009A 
                 ; 0001 009B }
00018a 9660      	ADIW R28,16
00018b 9508      	RET
                 ; .FEND
                 ;
                 ;long calPeriod(long per, long iMin, long iMax, long oMin, long oMax){
                 ; 0001 009D long calPeriod(long per, long iMin, long iMax, long oMin, long oMax){
                 _calPeriod:
                 ; .FSTART _calPeriod
                 ; 0001 009E     long     temp =  (per - iMin) * (oMax - oMin) / (iMax - iMin) + oMin;
                 ; 0001 009F     return temp;
00018c 940e 06cd 	CALL __PUTPARD2
00018e 9724      	SBIW R28,4
                 ;	per -> Y+20
                 ;	iMin -> Y+16
                 ;	iMax -> Y+12
                 ;	oMin -> Y+8
                 ;	oMax -> Y+4
                 ;	temp -> Y+0
                +
00018f 89a8     +LDD R26 , Y + 16
000190 89b9     +LDD R27 , Y + 16 + 1
000191 898a     +LDD R24 , Y + 16 + 2
000192 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
000193 89ec     +LDD R30 , Y + 20
000194 89fd     +LDD R31 , Y + 20 + 1
000195 896e     +LDD R22 , Y + 20 + 2
000196 897f     +LDD R23 , Y + 20 + 3
                 	__GETD1S 20
000197 940e 060a 	CALL __SUBD12
000199 937f      	PUSH R23
00019a 936f      	PUSH R22
00019b 93ff      	PUSH R31
00019c 93ef      	PUSH R30
                +
00019d 85a8     +LDD R26 , Y + 8
00019e 85b9     +LDD R27 , Y + 8 + 1
00019f 858a     +LDD R24 , Y + 8 + 2
0001a0 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
                +
0001a1 81ec     +LDD R30 , Y + 4
0001a2 81fd     +LDD R31 , Y + 4 + 1
0001a3 816e     +LDD R22 , Y + 4 + 2
0001a4 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0001a5 940e 060a 	CALL __SUBD12
0001a7 91af      	POP  R26
0001a8 91bf      	POP  R27
0001a9 918f      	POP  R24
0001aa 919f      	POP  R25
0001ab 940e 0645 	CALL __MULD12
0001ad 937f      	PUSH R23
0001ae 936f      	PUSH R22
0001af 93ff      	PUSH R31
0001b0 93ef      	PUSH R30
                +
0001b1 89a8     +LDD R26 , Y + 16
0001b2 89b9     +LDD R27 , Y + 16 + 1
0001b3 898a     +LDD R24 , Y + 16 + 2
0001b4 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
                +
0001b5 85ec     +LDD R30 , Y + 12
0001b6 85fd     +LDD R31 , Y + 12 + 1
0001b7 856e     +LDD R22 , Y + 12 + 2
0001b8 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
0001b9 940e 060a 	CALL __SUBD12
0001bb 91af      	POP  R26
0001bc 91bf      	POP  R27
0001bd 918f      	POP  R24
0001be 919f      	POP  R25
0001bf 940e 0687 	CALL __DIVD21
                +
0001c1 85a8     +LDD R26 , Y + 8
0001c2 85b9     +LDD R27 , Y + 8 + 1
0001c3 858a     +LDD R24 , Y + 8 + 2
0001c4 859b     +LDD R25 , Y + 8 + 3
                 	__GETD2S 8
0001c5 940e 0605 	CALL __ADDD12
0001c7 940e 06c3 	CALL __PUTD1S0
0001c9 9668      	ADIW R28,24
0001ca 9508      	RET
                 ; 0001 00A0 }
                 ; .FEND
                 ;
                 ;void createWave(void){
                 ; 0001 00A2 void createWave(void){
                 _createWave:
                 ; .FSTART _createWave
                 ; 0001 00A3     char message[17];
                 ; 0001 00A4     in_period = calPeriod(period,0,255,1,10000);
0001cb 9761      	SBIW R28,17
                 ;	message -> Y+0
0001cc 940e 04ab 	CALL SUBOPT_0x1
0001ce 93e0 0164 	STS  _in_period,R30
0001d0 93f0 0165 	STS  _in_period+1,R31
                 ; 0001 00A5     if (in_period % 1000 == 0){
0001d2 940e 04d4 	CALL SUBOPT_0x4
0001d4 940e 068c 	CALL __MODW21
0001d6 9730      	SBIW R30,0
0001d7 f459      	BRNE _0x2001B
                 ; 0001 00A6         sprintf(message, "%4dMS0", in_period/1000);
0001d8 940e 04cb 	CALL SUBOPT_0x2
                +
0001da e9e1     +LDI R30 , LOW ( 2 * _0x20000 + ( 29 ) )
0001db e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 29 ) )
                 	__POINTW1FN _0x20000,29
0001dc 93fa      	ST   -Y,R31
0001dd 93ea      	ST   -Y,R30
0001de 940e 04d4 	CALL SUBOPT_0x4
0001e0 940e 065d 	CALL __DIVW21
0001e2 c00a      	RJMP _0x2001E
                 ; 0001 00A7     }
                 ; 0001 00A8     else {
                 _0x2001B:
                 ; 0001 00A9         sprintf(message, "%4dUS0", in_period);
0001e3 940e 04cb 	CALL SUBOPT_0x2
                +
0001e5 e9e8     +LDI R30 , LOW ( 2 * _0x20000 + ( 36 ) )
0001e6 e0f0     +LDI R31 , HIGH ( 2 * _0x20000 + ( 36 ) )
                 	__POINTW1FN _0x20000,36
0001e7 93fa      	ST   -Y,R31
0001e8 93ea      	ST   -Y,R30
0001e9 91e0 0164 	LDS  R30,_in_period
0001eb 91f0 0165 	LDS  R31,_in_period+1
                 _0x2001E:
0001ed 940e 0620 	CALL __CWD1
0001ef 940e 06c8 	CALL __PUTPARD1
0001f1 e084      	LDI  R24,4
0001f2 940e 03b1 	CALL _sprintf
0001f4 9628      	ADIW R28,8
                 ; 0001 00AA     }
                 ; 0001 00AB     lcd_gotoxy(7, 1);
0001f5 e0e7      	LDI  R30,LOW(7)
0001f6 93ea      	ST   -Y,R30
0001f7 e0a1      	LDI  R26,LOW(1)
                 _0x2080003:
0001f8 940e 0405 	CALL _lcd_gotoxy
                 ; 0001 00AC     //sprintf(message, "%d", period);
                 ; 0001 00AD     lcd_puts(message);
0001fa 01de      	MOVW R26,R28
0001fb 940e 0444 	CALL _lcd_puts
                 ; 0001 00AE }
0001fd 9661      	ADIW R28,17
0001fe 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void init(void){
                 ; 0001 00B1 void init(void){
                 _init:
                 ; .FSTART _init
                 ; 0001 00B2 // Input/Output Ports initialization
                 ; 0001 00B3 // Port A initialization
                 ; 0001 00B4 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00B5 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001ff e0e0      	LDI  R30,LOW(0)
000200 bbea      	OUT  0x1A,R30
                 ; 0001 00B6 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00B7 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
000201 bbeb      	OUT  0x1B,R30
                 ; 0001 00B8 
                 ; 0001 00B9 // Port B initialization
                 ; 0001 00BA // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00BB DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
000202 bbe7      	OUT  0x17,R30
                 ; 0001 00BC // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00BD PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
000203 bbe8      	OUT  0x18,R30
                 ; 0001 00BE 
                 ; 0001 00BF // Port C initialization
                 ; 0001 00C0 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0001 00C1 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
000204 efef      	LDI  R30,LOW(255)
000205 bbe4      	OUT  0x14,R30
                 ; 0001 00C2 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0001 00C3 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
000206 e0e0      	LDI  R30,LOW(0)
000207 bbe5      	OUT  0x15,R30
                 ; 0001 00C4 
                 ; 0001 00C5 // Port D initialization
                 ; 0001 00C6 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0001 00C7 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
000208 efe0      	LDI  R30,LOW(240)
000209 bbe1      	OUT  0x11,R30
                 ; 0001 00C8 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0001 00C9 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
00020a e0e0      	LDI  R30,LOW(0)
00020b bbe2      	OUT  0x12,R30
                 ; 0001 00CA 
                 ; 0001 00CB // Timer/Counter 0 initialization
                 ; 0001 00CC // Clock source: System Clock
                 ; 0001 00CD // Clock value: 125/000 kHz
                 ; 0001 00CE // Mode: Normal top=0xFF
                 ; 0001 00CF // OC0 output: Disconnected
                 ; 0001 00D0 // Timer Period: 1 ms
                 ; 0001 00D1 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
00020c e0e3      	LDI  R30,LOW(3)
00020d bfe3      	OUT  0x33,R30
                 ; 0001 00D2 TCNT0=0x83;
00020e e8e3      	LDI  R30,LOW(131)
00020f bfe2      	OUT  0x32,R30
                 ; 0001 00D3 OCR0=0x00;
000210 e0e0      	LDI  R30,LOW(0)
000211 bfec      	OUT  0x3C,R30
                 ; 0001 00D4 
                 ; 0001 00D5 // Timer/Counter 1 initialization
                 ; 0001 00D6 // Clock source: System Clock
                 ; 0001 00D7 // Clock value: 8000/000 kHz
                 ; 0001 00D8 // Mode: Normal top=0xFFFF
                 ; 0001 00D9 // OC1A output: Toggle on compare match
                 ; 0001 00DA // OC1B output: Toggle on compare match
                 ; 0001 00DB // Noise Canceler: Off
                 ; 0001 00DC // Input Capture on Falling Edge
                 ; 0001 00DD // Timer Period: 5 ms
                 ; 0001 00DE // Output Pulse(s):
                 ; 0001 00DF // OC1A Period: 10 ms Width: 5 ms
                 ; 0001 00E0 // OC1B Period: 10 ms Width: 5 ms
                 ; 0001 00E1 // Timer1 Overflow Interrupt: On
                 ; 0001 00E2 // Input Capture Interrupt: Off
                 ; 0001 00E3 // Compare A Match Interrupt: Off
                 ; 0001 00E4 // Compare B Match Interrupt: Off
                 ; 0001 00E5 TCCR1A=(0<<COM1A1) | (1<<COM1A0) | (0<<COM1B1) | (1<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000212 e5e0      	LDI  R30,LOW(80)
000213 bdef      	OUT  0x2F,R30
                 ; 0001 00E6 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (1<<CS10);
000214 e0e1      	LDI  R30,LOW(1)
000215 bdee      	OUT  0x2E,R30
                 ; 0001 00E7 TCNT1H=0x63;
000216 e6e3      	LDI  R30,LOW(99)
000217 bded      	OUT  0x2D,R30
                 ; 0001 00E8 TCNT1L=0xC0;
000218 ece0      	LDI  R30,LOW(192)
000219 bdec      	OUT  0x2C,R30
                 ; 0001 00E9 ICR1H=0x00;
00021a e0e0      	LDI  R30,LOW(0)
00021b bde7      	OUT  0x27,R30
                 ; 0001 00EA ICR1L=0x00;
00021c bde6      	OUT  0x26,R30
                 ; 0001 00EB OCR1AH=0x00;
00021d bdeb      	OUT  0x2B,R30
                 ; 0001 00EC OCR1AL=0x00;
00021e bdea      	OUT  0x2A,R30
                 ; 0001 00ED OCR1BH=0x00;
00021f bde9      	OUT  0x29,R30
                 ; 0001 00EE OCR1BL=0x00;
000220 bde8      	OUT  0x28,R30
                 ; 0001 00EF 
                 ; 0001 00F0 // Timer/Counter 2 initialization
                 ; 0001 00F1 // Clock source: System Clock
                 ; 0001 00F2 // Clock value: Timer2 Stopped
                 ; 0001 00F3 // Mode: Normal top=0xFF
                 ; 0001 00F4 // OC2 output: Disconnected
                 ; 0001 00F5 ASSR=0<<AS2;
000221 bde2      	OUT  0x22,R30
                 ; 0001 00F6 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000222 bde5      	OUT  0x25,R30
                 ; 0001 00F7 TCNT2=0x00;
000223 bde4      	OUT  0x24,R30
                 ; 0001 00F8 OCR2=0x00;
000224 bde3      	OUT  0x23,R30
                 ; 0001 00F9 
                 ; 0001 00FA // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0001 00FB TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
000225 e0e5      	LDI  R30,LOW(5)
000226 bfe9      	OUT  0x39,R30
                 ; 0001 00FC 
                 ; 0001 00FD // External Interrupt(s) initialization
                 ; 0001 00FE // INT0: On
                 ; 0001 00FF // INT0 Mode: Falling Edge
                 ; 0001 0100 // INT1: On
                 ; 0001 0101 // INT1 Mode: Falling Edge
                 ; 0001 0102 // INT2: On
                 ; 0001 0103 // INT2 Mode: Falling Edge
                 ; 0001 0104 GICR|=(1<<INT1) | (1<<INT0) | (1<<INT2);
000227 b7eb      	IN   R30,0x3B
000228 6ee0      	ORI  R30,LOW(0xE0)
000229 bfeb      	OUT  0x3B,R30
                 ; 0001 0105 MCUCR=(1<<ISC11) | (0<<ISC10) | (1<<ISC01) | (0<<ISC00);
00022a e0ea      	LDI  R30,LOW(10)
00022b bfe5      	OUT  0x35,R30
                 ; 0001 0106 MCUCSR=(0<<ISC2);
00022c e0e0      	LDI  R30,LOW(0)
00022d bfe4      	OUT  0x34,R30
                 ; 0001 0107 GIFR=(1<<INTF1) | (1<<INTF0) | (1<<INTF2);
00022e eee0      	LDI  R30,LOW(224)
00022f bfea      	OUT  0x3A,R30
                 ; 0001 0108 
                 ; 0001 0109 // USART initialization
                 ; 0001 010A // USART disabled
                 ; 0001 010B UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000230 e0e0      	LDI  R30,LOW(0)
000231 b9ea      	OUT  0xA,R30
                 ; 0001 010C 
                 ; 0001 010D // Analog Comparator initialization
                 ; 0001 010E // Analog Comparator: Off
                 ; 0001 010F // The Analog Comparator's positive input is
                 ; 0001 0110 // connected to the AIN0 pin
                 ; 0001 0111 // The Analog Comparator's negative input is
                 ; 0001 0112 // connected to the AIN1 pin
                 ; 0001 0113 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
000232 e8e0      	LDI  R30,LOW(128)
000233 b9e8      	OUT  0x8,R30
                 ; 0001 0114 SFIOR=(0<<ACME);
000234 e0e0      	LDI  R30,LOW(0)
000235 bfe0      	OUT  0x30,R30
                 ; 0001 0115 
                 ; 0001 0116 // ADC initialization
                 ; 0001 0117 // ADC disabled
                 ; 0001 0118 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
000236 b9e6      	OUT  0x6,R30
                 ; 0001 0119 
                 ; 0001 011A // SPI initialization
                 ; 0001 011B // SPI disabled
                 ; 0001 011C SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
000237 b9ed      	OUT  0xD,R30
                 ; 0001 011D 
                 ; 0001 011E // TWI initialization
                 ; 0001 011F // TWI disabled
                 ; 0001 0120 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
000238 bfe6      	OUT  0x36,R30
                 ; 0001 0121 
                 ; 0001 0122 // Alphanumeric LCD initialization
                 ; 0001 0123 // Connections are specified in the
                 ; 0001 0124 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0001 0125 // RS - PORTA Bit 0
                 ; 0001 0126 // RD - PORTA Bit 1
                 ; 0001 0127 // EN - PORTA Bit 2
                 ; 0001 0128 // D4 - PORTA Bit 4
                 ; 0001 0129 // D5 - PORTA Bit 5
                 ; 0001 012A // D6 - PORTA Bit 6
                 ; 0001 012B // D7 - PORTA Bit 7
                 ; 0001 012C // Characters/line: 16
                 ; 0001 012D lcd_init(16);
000239 e1a0      	LDI  R26,LOW(16)
00023a 940e 0455 	CALL _lcd_init
                 ; 0001 012E }
00023c 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00023d 93ba      	ST   -Y,R27
00023e 93aa      	ST   -Y,R26
00023f 931a      	ST   -Y,R17
000240 930a      	ST   -Y,R16
000241 81aa      	LDD  R26,Y+2
000242 81bb      	LDD  R27,Y+2+1
000243 9612      	ADIW R26,2
000244 940e 06bb 	CALL __GETW1P
000246 9730      	SBIW R30,0
000247 f159      	BREQ _0x2000010
000248 81aa      	LDD  R26,Y+2
000249 81bb      	LDD  R27,Y+2+1
00024a 9614      	ADIW R26,4
00024b 940e 06bb 	CALL __GETW1P
00024d 018f      	MOVW R16,R30
00024e 9730      	SBIW R30,0
00024f f061      	BREQ _0x2000012
                +
000250 3002     +CPI R16 , LOW ( 2 )
000251 e0e0     +LDI R30 , HIGH ( 2 )
000252 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000253 f098      	BRLO _0x2000013
000254 01f8      	MOVW R30,R16
000255 9731      	SBIW R30,1
000256 018f      	MOVW R16,R30
                +
000257 81aa     +LDD R26 , Y + 2
000258 81bb     +LDD R27 , Y + 2 + 1
000259 9614     +ADIW R26 , 4
00025a 93ed     +ST X + , R30
00025b 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00025c 81aa      	LDD  R26,Y+2
00025d 81bb      	LDD  R27,Y+2+1
00025e 9612      	ADIW R26,2
00025f 91ed      	LD   R30,X+
000260 91fd      	LD   R31,X+
000261 9631      	ADIW R30,1
000262 93fe      	ST   -X,R31
000263 93ee      	ST   -X,R30
000264 9731      	SBIW R30,1
000265 81ac      	LDD  R26,Y+4
000266 83a0      	STD  Z+0,R26
                 _0x2000013:
000267 81aa      	LDD  R26,Y+2
000268 81bb      	LDD  R27,Y+2+1
000269 940e 06bb 	CALL __GETW1P
00026b 23ff      	TST  R31
00026c f02a      	BRMI _0x2000014
00026d 91ed      	LD   R30,X+
00026e 91fd      	LD   R31,X+
00026f 9631      	ADIW R30,1
000270 93fe      	ST   -X,R31
000271 93ee      	ST   -X,R30
                 _0x2000014:
000272 c006      	RJMP _0x2000015
                 _0x2000010:
000273 81aa      	LDD  R26,Y+2
000274 81bb      	LDD  R27,Y+2+1
000275 efef      	LDI  R30,LOW(65535)
000276 efff      	LDI  R31,HIGH(65535)
000277 93ed      	ST   X+,R30
000278 93fc      	ST   X,R31
                 _0x2000015:
000279 8119      	LDD  R17,Y+1
00027a 8108      	LDD  R16,Y+0
00027b 9625      	ADIW R28,5
00027c 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00027d 93ba      	ST   -Y,R27
00027e 93aa      	ST   -Y,R26
00027f 9726      	SBIW R28,6
000280 940e 06d6 	CALL __SAVELOCR6
000282 e010      	LDI  R17,0
000283 85ac      	LDD  R26,Y+12
000284 85bd      	LDD  R27,Y+12+1
000285 e0e0      	LDI  R30,LOW(0)
000286 e0f0      	LDI  R31,HIGH(0)
000287 93ed      	ST   X+,R30
000288 93fc      	ST   X,R31
                 _0x2000016:
000289 89ea      	LDD  R30,Y+18
00028a 89fb      	LDD  R31,Y+18+1
00028b 9631      	ADIW R30,1
00028c 8bea      	STD  Y+18,R30
00028d 8bfb      	STD  Y+18+1,R31
00028e 9731      	SBIW R30,1
00028f 91e4      	LPM  R30,Z
000290 2f2e      	MOV  R18,R30
000291 30e0      	CPI  R30,0
000292 f409      	BRNE PC+2
000293 c115      	RJMP _0x2000018
000294 2fe1      	MOV  R30,R17
000295 30e0      	CPI  R30,0
000296 f439      	BRNE _0x200001C
000297 3225      	CPI  R18,37
000298 f411      	BRNE _0x200001D
000299 e011      	LDI  R17,LOW(1)
00029a c002      	RJMP _0x200001E
                 _0x200001D:
00029b 940e 04db 	CALL SUBOPT_0x5
                 _0x200001E:
00029d c10a      	RJMP _0x200001B
                 _0x200001C:
00029e 30e1      	CPI  R30,LOW(0x1)
00029f f4a9      	BRNE _0x200001F
0002a0 3225      	CPI  R18,37
0002a1 f419      	BRNE _0x2000020
0002a2 940e 04db 	CALL SUBOPT_0x5
0002a4 c102      	RJMP _0x20000CC
                 _0x2000020:
0002a5 e012      	LDI  R17,LOW(2)
0002a6 e040      	LDI  R20,LOW(0)
0002a7 e000      	LDI  R16,LOW(0)
0002a8 322d      	CPI  R18,45
0002a9 f411      	BRNE _0x2000021
0002aa e001      	LDI  R16,LOW(1)
0002ab c0fc      	RJMP _0x200001B
                 _0x2000021:
0002ac 322b      	CPI  R18,43
0002ad f411      	BRNE _0x2000022
0002ae e24b      	LDI  R20,LOW(43)
0002af c0f8      	RJMP _0x200001B
                 _0x2000022:
0002b0 3220      	CPI  R18,32
0002b1 f411      	BRNE _0x2000023
0002b2 e240      	LDI  R20,LOW(32)
0002b3 c0f4      	RJMP _0x200001B
                 _0x2000023:
0002b4 c002      	RJMP _0x2000024
                 _0x200001F:
0002b5 30e2      	CPI  R30,LOW(0x2)
0002b6 f439      	BRNE _0x2000025
                 _0x2000024:
0002b7 e050      	LDI  R21,LOW(0)
0002b8 e013      	LDI  R17,LOW(3)
0002b9 3320      	CPI  R18,48
0002ba f411      	BRNE _0x2000026
0002bb 6800      	ORI  R16,LOW(128)
0002bc c0eb      	RJMP _0x200001B
                 _0x2000026:
0002bd c003      	RJMP _0x2000027
                 _0x2000025:
0002be 30e3      	CPI  R30,LOW(0x3)
0002bf f009      	BREQ PC+2
0002c0 c0e7      	RJMP _0x200001B
                 _0x2000027:
0002c1 3320      	CPI  R18,48
0002c2 f010      	BRLO _0x200002A
0002c3 332a      	CPI  R18,58
0002c4 f008      	BRLO _0x200002B
                 _0x200002A:
0002c5 c007      	RJMP _0x2000029
                 _0x200002B:
0002c6 e0aa      	LDI  R26,LOW(10)
0002c7 9f5a      	MUL  R21,R26
0002c8 2d50      	MOV  R21,R0
0002c9 2fe2      	MOV  R30,R18
0002ca 53e0      	SUBI R30,LOW(48)
0002cb 0f5e      	ADD  R21,R30
0002cc c0db      	RJMP _0x200001B
                 _0x2000029:
0002cd 2fe2      	MOV  R30,R18
0002ce 36e3      	CPI  R30,LOW(0x63)
0002cf f449      	BRNE _0x200002F
0002d0 940e 04e2 	CALL SUBOPT_0x6
0002d2 89e8      	LDD  R30,Y+16
0002d3 89f9      	LDD  R31,Y+16+1
0002d4 81a4      	LDD  R26,Z+4
0002d5 93aa      	ST   -Y,R26
0002d6 940e 04e8 	CALL SUBOPT_0x7
0002d8 c0ce      	RJMP _0x2000030
                 _0x200002F:
0002d9 37e3      	CPI  R30,LOW(0x73)
0002da f441      	BRNE _0x2000032
0002db 940e 04e2 	CALL SUBOPT_0x6
0002dd 940e 04ee 	CALL SUBOPT_0x8
0002df 940e 0484 	CALL _strlen
0002e1 2f1e      	MOV  R17,R30
0002e2 c00a      	RJMP _0x2000033
                 _0x2000032:
0002e3 37e0      	CPI  R30,LOW(0x70)
0002e4 f461      	BRNE _0x2000035
0002e5 940e 04e2 	CALL SUBOPT_0x6
0002e7 940e 04ee 	CALL SUBOPT_0x8
0002e9 940e 0490 	CALL _strlenf
0002eb 2f1e      	MOV  R17,R30
0002ec 6008      	ORI  R16,LOW(8)
                 _0x2000033:
0002ed 6002      	ORI  R16,LOW(2)
0002ee 770f      	ANDI R16,LOW(127)
0002ef e030      	LDI  R19,LOW(0)
0002f0 c034      	RJMP _0x2000036
                 _0x2000035:
0002f1 36e4      	CPI  R30,LOW(0x64)
0002f2 f011      	BREQ _0x2000039
0002f3 36e9      	CPI  R30,LOW(0x69)
0002f4 f411      	BRNE _0x200003A
                 _0x2000039:
0002f5 6004      	ORI  R16,LOW(4)
0002f6 c002      	RJMP _0x200003B
                 _0x200003A:
0002f7 37e5      	CPI  R30,LOW(0x75)
0002f8 f431      	BRNE _0x200003C
                 _0x200003B:
0002f9 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
0002fa e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
0002fb 83ee      	STD  Y+6,R30
0002fc 83ff      	STD  Y+6+1,R31
0002fd e015      	LDI  R17,LOW(5)
0002fe c00c      	RJMP _0x200003D
                 _0x200003C:
0002ff 35e8      	CPI  R30,LOW(0x58)
000300 f411      	BRNE _0x200003F
000301 6008      	ORI  R16,LOW(8)
000302 c003      	RJMP _0x2000040
                 _0x200003F:
000303 37e8      	CPI  R30,LOW(0x78)
000304 f009      	BREQ PC+2
000305 c0a1      	RJMP _0x2000071
                 _0x2000040:
000306 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
000307 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000308 83ee      	STD  Y+6,R30
000309 83ff      	STD  Y+6+1,R31
00030a e014      	LDI  R17,LOW(4)
                 _0x200003D:
00030b ff02      	SBRS R16,2
00030c c014      	RJMP _0x2000042
00030d 940e 04e2 	CALL SUBOPT_0x6
00030f 940e 04f8 	CALL SUBOPT_0x9
000311 85ab      	LDD  R26,Y+11
000312 23aa      	TST  R26
000313 f43a      	BRPL _0x2000043
000314 85ea      	LDD  R30,Y+10
000315 85fb      	LDD  R31,Y+10+1
000316 940e 060f 	CALL __ANEGW1
000318 87ea      	STD  Y+10,R30
000319 87fb      	STD  Y+10+1,R31
00031a e24d      	LDI  R20,LOW(45)
                 _0x2000043:
00031b 3040      	CPI  R20,0
00031c f011      	BREQ _0x2000044
00031d 5f1f      	SUBI R17,-LOW(1)
00031e c001      	RJMP _0x2000045
                 _0x2000044:
00031f 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
000320 c004      	RJMP _0x2000046
                 _0x2000042:
000321 940e 04e2 	CALL SUBOPT_0x6
000323 940e 04f8 	CALL SUBOPT_0x9
                 _0x2000046:
                 _0x2000036:
000325 fd00      	SBRC R16,0
000326 c011      	RJMP _0x2000047
                 _0x2000048:
000327 1715      	CP   R17,R21
000328 f478      	BRSH _0x200004A
000329 ff07      	SBRS R16,7
00032a c008      	RJMP _0x200004B
00032b ff02      	SBRS R16,2
00032c c004      	RJMP _0x200004C
00032d 7f0b      	ANDI R16,LOW(251)
00032e 2f24      	MOV  R18,R20
00032f 5011      	SUBI R17,LOW(1)
000330 c001      	RJMP _0x200004D
                 _0x200004C:
000331 e320      	LDI  R18,LOW(48)
                 _0x200004D:
000332 c001      	RJMP _0x200004E
                 _0x200004B:
000333 e220      	LDI  R18,LOW(32)
                 _0x200004E:
000334 940e 04db 	CALL SUBOPT_0x5
000336 5051      	SUBI R21,LOW(1)
000337 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000338 2f31      	MOV  R19,R17
000339 ff01      	SBRS R16,1
00033a c017      	RJMP _0x200004F
                 _0x2000050:
00033b 3030      	CPI  R19,0
00033c f0a1      	BREQ _0x2000052
00033d ff03      	SBRS R16,3
00033e c006      	RJMP _0x2000053
00033f 81ee      	LDD  R30,Y+6
000340 81ff      	LDD  R31,Y+6+1
000341 9125      	LPM  R18,Z+
000342 83ee      	STD  Y+6,R30
000343 83ff      	STD  Y+6+1,R31
000344 c005      	RJMP _0x2000054
                 _0x2000053:
000345 81ae      	LDD  R26,Y+6
000346 81bf      	LDD  R27,Y+6+1
000347 912d      	LD   R18,X+
000348 83ae      	STD  Y+6,R26
000349 83bf      	STD  Y+6+1,R27
                 _0x2000054:
00034a 940e 04db 	CALL SUBOPT_0x5
00034c 3050      	CPI  R21,0
00034d f009      	BREQ _0x2000055
00034e 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00034f 5031      	SUBI R19,LOW(1)
000350 cfea      	RJMP _0x2000050
                 _0x2000052:
000351 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
000352 e320      	LDI  R18,LOW(48)
000353 81ee      	LDD  R30,Y+6
000354 81ff      	LDD  R31,Y+6+1
000355 940e 06bf 	CALL __GETW1PF
000357 87e8      	STD  Y+8,R30
000358 87f9      	STD  Y+8+1,R31
000359 81ee      	LDD  R30,Y+6
00035a 81ff      	LDD  R31,Y+6+1
00035b 9632      	ADIW R30,2
00035c 83ee      	STD  Y+6,R30
00035d 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00035e 85e8      	LDD  R30,Y+8
00035f 85f9      	LDD  R31,Y+8+1
000360 85aa      	LDD  R26,Y+10
000361 85bb      	LDD  R27,Y+10+1
000362 17ae      	CP   R26,R30
000363 07bf      	CPC  R27,R31
000364 f050      	BRLO _0x200005C
000365 5f2f      	SUBI R18,-LOW(1)
000366 85a8      	LDD  R26,Y+8
000367 85b9      	LDD  R27,Y+8+1
000368 85ea      	LDD  R30,Y+10
000369 85fb      	LDD  R31,Y+10+1
00036a 1bea      	SUB  R30,R26
00036b 0bfb      	SBC  R31,R27
00036c 87ea      	STD  Y+10,R30
00036d 87fb      	STD  Y+10+1,R31
00036e cfef      	RJMP _0x200005A
                 _0x200005C:
00036f 332a      	CPI  R18,58
000370 f028      	BRLO _0x200005D
000371 ff03      	SBRS R16,3
000372 c002      	RJMP _0x200005E
000373 5f29      	SUBI R18,-LOW(7)
000374 c001      	RJMP _0x200005F
                 _0x200005E:
000375 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000376 fd04      	SBRC R16,4
000377 c01a      	RJMP _0x2000061
000378 3321      	CPI  R18,49
000379 f420      	BRSH _0x2000063
00037a 85a8      	LDD  R26,Y+8
00037b 85b9      	LDD  R27,Y+8+1
00037c 9711      	SBIW R26,1
00037d f409      	BRNE _0x2000062
                 _0x2000063:
00037e c009      	RJMP _0x20000CD
                 _0x2000062:
00037f 1753      	CP   R21,R19
000380 f010      	BRLO _0x2000067
000381 ff00      	SBRS R16,0
000382 c001      	RJMP _0x2000068
                 _0x2000067:
000383 c013      	RJMP _0x2000066
                 _0x2000068:
000384 e220      	LDI  R18,LOW(32)
000385 ff07      	SBRS R16,7
000386 c00b      	RJMP _0x2000069
000387 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000388 6100      	ORI  R16,LOW(16)
000389 ff02      	SBRS R16,2
00038a c007      	RJMP _0x200006A
00038b 7f0b      	ANDI R16,LOW(251)
00038c 934a      	ST   -Y,R20
00038d 940e 04e8 	CALL SUBOPT_0x7
00038f 3050      	CPI  R21,0
000390 f009      	BREQ _0x200006B
000391 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000392 940e 04db 	CALL SUBOPT_0x5
000394 3050      	CPI  R21,0
000395 f009      	BREQ _0x200006C
000396 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000397 5031      	SUBI R19,LOW(1)
000398 85a8      	LDD  R26,Y+8
000399 85b9      	LDD  R27,Y+8+1
00039a 9712      	SBIW R26,2
00039b f008      	BRLO _0x2000059
00039c cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00039d ff00      	SBRS R16,0
00039e c008      	RJMP _0x200006D
                 _0x200006E:
00039f 3050      	CPI  R21,0
0003a0 f031      	BREQ _0x2000070
0003a1 5051      	SUBI R21,LOW(1)
0003a2 e2e0      	LDI  R30,LOW(32)
0003a3 93ea      	ST   -Y,R30
0003a4 940e 04e8 	CALL SUBOPT_0x7
0003a6 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0003a7 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0003a8 cee0      	RJMP _0x2000016
                 _0x2000018:
0003a9 85ac      	LDD  R26,Y+12
0003aa 85bd      	LDD  R27,Y+12+1
0003ab 940e 06bb 	CALL __GETW1P
0003ad 940e 06dd 	CALL __LOADLOCR6
0003af 9664      	ADIW R28,20
0003b0 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0003b1 92ff      	PUSH R15
0003b2 2ef8      	MOV  R15,R24
0003b3 9726      	SBIW R28,6
0003b4 940e 06d8 	CALL __SAVELOCR4
0003b6 940e 0500 	CALL SUBOPT_0xA
0003b8 9730      	SBIW R30,0
0003b9 f419      	BRNE _0x2000072
0003ba efef      	LDI  R30,LOW(65535)
0003bb efff      	LDI  R31,HIGH(65535)
0003bc c023      	RJMP _0x2080002
                 _0x2000072:
0003bd 01de      	MOVW R26,R28
0003be 9616      	ADIW R26,6
0003bf 940e 0601 	CALL __ADDW2R15
0003c1 018d      	MOVW R16,R26
0003c2 940e 0500 	CALL SUBOPT_0xA
0003c4 83ee      	STD  Y+6,R30
0003c5 83ff      	STD  Y+6+1,R31
0003c6 e0e0      	LDI  R30,LOW(0)
0003c7 87e8      	STD  Y+8,R30
0003c8 87e9      	STD  Y+8+1,R30
0003c9 01de      	MOVW R26,R28
0003ca 961a      	ADIW R26,10
0003cb 940e 0601 	CALL __ADDW2R15
0003cd 940e 06bb 	CALL __GETW1P
0003cf 93fa      	ST   -Y,R31
0003d0 93ea      	ST   -Y,R30
0003d1 931a      	ST   -Y,R17
0003d2 930a      	ST   -Y,R16
0003d3 e3ed      	LDI  R30,LOW(_put_buff_G100)
0003d4 e0f2      	LDI  R31,HIGH(_put_buff_G100)
0003d5 93fa      	ST   -Y,R31
0003d6 93ea      	ST   -Y,R30
0003d7 01de      	MOVW R26,R28
0003d8 961a      	ADIW R26,10
0003d9 dea3      	RCALL __print_G100
0003da 019f      	MOVW R18,R30
0003db 81ae      	LDD  R26,Y+6
0003dc 81bf      	LDD  R27,Y+6+1
0003dd e0e0      	LDI  R30,LOW(0)
0003de 93ec      	ST   X,R30
0003df 01f9      	MOVW R30,R18
                 _0x2080002:
0003e0 940e 06df 	CALL __LOADLOCR4
0003e2 962a      	ADIW R28,10
0003e3 90ff      	POP  R15
0003e4 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
0003e5 93aa      	ST   -Y,R26
0003e6 b3e5      	IN   R30,0x15
0003e7 70ef      	ANDI R30,LOW(0xF)
0003e8 2fae      	MOV  R26,R30
0003e9 81e8      	LD   R30,Y
0003ea 7fe0      	ANDI R30,LOW(0xF0)
0003eb 2bea      	OR   R30,R26
0003ec bbe5      	OUT  0x15,R30
                +
0003ed e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003ee 958a     +DEC R24
0003ef f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003f0 9aaa      	SBI  0x15,2
                +
0003f1 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003f2 958a     +DEC R24
0003f3 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003f4 98aa      	CBI  0x15,2
                +
0003f5 e08d     +LDI R24 , LOW ( 13 )
                +__DELAY_USB_LOOP :
0003f6 958a     +DEC R24
0003f7 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 13
0003f8 c089      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
0003f9 93aa      	ST   -Y,R26
0003fa 81a8      	LD   R26,Y
0003fb dfe9      	RCALL __lcd_write_nibble_G101
0003fc 81e8          ld    r30,y
0003fd 95e2          swap  r30
0003fe 83e8          st    y,r30
0003ff 81a8      	LD   R26,Y
000400 dfe4      	RCALL __lcd_write_nibble_G101
                +
000401 e885     +LDI R24 , LOW ( 133 )
                +__DELAY_USB_LOOP :
000402 958a     +DEC R24
000403 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 133
000404 c07d      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000405 93aa      	ST   -Y,R26
000406 81e8      	LD   R30,Y
000407 e0f0      	LDI  R31,0
000408 59ea      	SUBI R30,LOW(-__base_y_G101)
000409 4ffe      	SBCI R31,HIGH(-__base_y_G101)
00040a 81e0      	LD   R30,Z
00040b 81a9      	LDD  R26,Y+1
00040c 0fae      	ADD  R26,R30
00040d dfeb      	RCALL __lcd_write_data
00040e 81e9      	LDD  R30,Y+1
00040f 93e0 016a 	STS  __lcd_x,R30
000411 81e8      	LD   R30,Y
000412 93e0 016b 	STS  __lcd_y,R30
000414 9622      	ADIW R28,2
000415 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
000416 e0a2      	LDI  R26,LOW(2)
000417 940e 0507 	CALL SUBOPT_0xB
000419 e0ac      	LDI  R26,LOW(12)
00041a dfde      	RCALL __lcd_write_data
00041b e0a1      	LDI  R26,LOW(1)
00041c 940e 0507 	CALL SUBOPT_0xB
00041e e0e0      	LDI  R30,LOW(0)
00041f 93e0 016b 	STS  __lcd_y,R30
000421 93e0 016a 	STS  __lcd_x,R30
000423 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
000424 93aa      	ST   -Y,R26
000425 81a8      	LD   R26,Y
000426 30aa      	CPI  R26,LOW(0xA)
000427 f031      	BREQ _0x2020005
000428 91e0 016c 	LDS  R30,__lcd_maxx
00042a 91a0 016a 	LDS  R26,__lcd_x
00042c 17ae      	CP   R26,R30
00042d f060      	BRLO _0x2020004
                 _0x2020005:
00042e e0e0      	LDI  R30,LOW(0)
00042f 93ea      	ST   -Y,R30
000430 91a0 016b 	LDS  R26,__lcd_y
000432 5faf      	SUBI R26,-LOW(1)
000433 93a0 016b 	STS  __lcd_y,R26
000435 dfcf      	RCALL _lcd_gotoxy
000436 81a8      	LD   R26,Y
000437 30aa      	CPI  R26,LOW(0xA)
000438 f409      	BRNE _0x2020007
000439 c048      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
00043a 91e0 016a 	LDS  R30,__lcd_x
00043c 5fef      	SUBI R30,-LOW(1)
00043d 93e0 016a 	STS  __lcd_x,R30
00043f 9aa8      	SBI  0x15,0
000440 81a8      	LD   R26,Y
000441 dfb7      	RCALL __lcd_write_data
000442 98a8      	CBI  0x15,0
000443 c03e      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
000444 93ba      	ST   -Y,R27
000445 93aa      	ST   -Y,R26
000446 931a      	ST   -Y,R17
                 _0x2020008:
000447 81a9      	LDD  R26,Y+1
000448 81ba      	LDD  R27,Y+1+1
000449 91ed      	LD   R30,X+
00044a 83a9      	STD  Y+1,R26
00044b 83ba      	STD  Y+1+1,R27
00044c 2f1e      	MOV  R17,R30
00044d 30e0      	CPI  R30,0
00044e f019      	BREQ _0x202000A
00044f 2fa1      	MOV  R26,R17
000450 dfd3      	RCALL _lcd_putchar
000451 cff5      	RJMP _0x2020008
                 _0x202000A:
000452 8118      	LDD  R17,Y+0
000453 9623      	ADIW R28,3
000454 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000455 93aa      	ST   -Y,R26
000456 b3e4      	IN   R30,0x14
000457 6fe0      	ORI  R30,LOW(0xF0)
000458 bbe4      	OUT  0x14,R30
000459 9aa2      	SBI  0x14,2
00045a 9aa0      	SBI  0x14,0
00045b 9aa1      	SBI  0x14,1
00045c 98aa      	CBI  0x15,2
00045d 98a8      	CBI  0x15,0
00045e 98a9      	CBI  0x15,1
00045f 81e8      	LD   R30,Y
000460 93e0 016c 	STS  __lcd_maxx,R30
000462 58e0      	SUBI R30,-LOW(128)
                +
000463 93e0 0168+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
000465 81e8      	LD   R30,Y
000466 54e0      	SUBI R30,-LOW(192)
                +
000467 93e0 0169+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000469 e1a4      	LDI  R26,LOW(20)
00046a e0b0      	LDI  R27,0
00046b 940e 0515 	CALL _delay_ms
00046d 940e 050d 	CALL SUBOPT_0xC
00046f 940e 050d 	CALL SUBOPT_0xC
000471 940e 050d 	CALL SUBOPT_0xC
000473 e2a0      	LDI  R26,LOW(32)
000474 df70      	RCALL __lcd_write_nibble_G101
                +
000475 ec88     +LDI R24 , LOW ( 200 )
000476 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000477 9701     +SBIW R24 , 1
000478 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000479 e2a8      	LDI  R26,LOW(40)
00047a df7e      	RCALL __lcd_write_data
00047b e0a4      	LDI  R26,LOW(4)
00047c df7c      	RCALL __lcd_write_data
00047d e8a5      	LDI  R26,LOW(133)
00047e df7a      	RCALL __lcd_write_data
00047f e0a6      	LDI  R26,LOW(6)
000480 df78      	RCALL __lcd_write_data
000481 df94      	RCALL _lcd_clear
                 _0x2080001:
000482 9621      	ADIW R28,1
000483 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000484 93ba      	ST   -Y,R27
000485 93aa      	ST   -Y,R26
000486 91a9          ld   r26,y+
000487 91b9          ld   r27,y+
000488 27ee          clr  r30
000489 27ff          clr  r31
                 strlen0:
00048a 916d          ld   r22,x+
00048b 2366          tst  r22
00048c f011          breq strlen1
00048d 9631          adiw r30,1
00048e cffb          rjmp strlen0
                 strlen1:
00048f 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000490 93ba      	ST   -Y,R27
000491 93aa      	ST   -Y,R26
000492 27aa          clr  r26
000493 27bb          clr  r27
000494 91e9          ld   r30,y+
000495 91f9          ld   r31,y+
                 strlenf0:
000496 9005      	lpm  r0,z+
000497 2000          tst  r0
000498 f011          breq strlenf1
000499 9611          adiw r26,1
00049a cffb          rjmp strlenf0
                 strlenf1:
00049b 01fd          movw r30,r26
00049c 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _emptyCapacity:
000160           	.BYTE 0x2
                 _period:
000162           	.BYTE 0x2
                 _in_period:
000164           	.BYTE 0x2
                 __base_y_G101:
000166           	.BYTE 0x4
                 __lcd_x:
00016a           	.BYTE 0x1
                 __lcd_y:
00016b           	.BYTE 0x1
                 __lcd_maxx:
00016c           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:41 WORDS
                 SUBOPT_0x0:
00049d 920a      	ST   -Y,R0
00049e 921a      	ST   -Y,R1
00049f 92fa      	ST   -Y,R15
0004a0 936a      	ST   -Y,R22
0004a1 937a      	ST   -Y,R23
0004a2 938a      	ST   -Y,R24
0004a3 939a      	ST   -Y,R25
0004a4 93aa      	ST   -Y,R26
0004a5 93ba      	ST   -Y,R27
0004a6 93ea      	ST   -Y,R30
0004a7 93fa      	ST   -Y,R31
0004a8 b7ef      	IN   R30,SREG
0004a9 93ea      	ST   -Y,R30
0004aa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x1:
0004ab 91e0 0162 	LDS  R30,_period
0004ad 91f0 0163 	LDS  R31,_period+1
0004af 940e 0620 	CALL __CWD1
0004b1 940e 06c8 	CALL __PUTPARD1
                +
0004b3 e0e0     +LDI R30 , LOW ( 0x0 )
0004b4 e0f0     +LDI R31 , HIGH ( 0x0 )
0004b5 e060     +LDI R22 , BYTE3 ( 0x0 )
0004b6 e070     +LDI R23 , BYTE4 ( 0x0 )
                 	__GETD1N 0x0
0004b7 940e 06c8 	CALL __PUTPARD1
                +
0004b9 efef     +LDI R30 , LOW ( 0xFF )
0004ba e0f0     +LDI R31 , HIGH ( 0xFF )
0004bb e060     +LDI R22 , BYTE3 ( 0xFF )
0004bc e070     +LDI R23 , BYTE4 ( 0xFF )
                 	__GETD1N 0xFF
0004bd 940e 06c8 	CALL __PUTPARD1
                +
0004bf e0e1     +LDI R30 , LOW ( 0x1 )
0004c0 e0f0     +LDI R31 , HIGH ( 0x1 )
0004c1 e060     +LDI R22 , BYTE3 ( 0x1 )
0004c2 e070     +LDI R23 , BYTE4 ( 0x1 )
                 	__GETD1N 0x1
0004c3 940e 06c8 	CALL __PUTPARD1
                +
0004c5 e1a0     +LDI R26 , LOW ( 0x2710 )
0004c6 e2b7     +LDI R27 , HIGH ( 0x2710 )
0004c7 e080     +LDI R24 , BYTE3 ( 0x2710 )
0004c8 e090     +LDI R25 , BYTE4 ( 0x2710 )
                 	__GETD2N 0x2710
0004c9 940c 018c 	JMP  _calPeriod
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x2:
0004cb 01fe      	MOVW R30,R28
0004cc 93fa      	ST   -Y,R31
0004cd 93ea      	ST   -Y,R30
0004ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0004cf 940e 0620 	CALL __CWD1
0004d1 940e 06c8 	CALL __PUTPARD1
0004d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x4:
0004d4 91a0 0164 	LDS  R26,_in_period
0004d6 91b0 0165 	LDS  R27,_in_period+1
0004d8 eee8      	LDI  R30,LOW(1000)
0004d9 e0f3      	LDI  R31,HIGH(1000)
0004da 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
0004db 932a      	ST   -Y,R18
0004dc 85ad      	LDD  R26,Y+13
0004dd 85be      	LDD  R27,Y+13+1
0004de 85ef      	LDD  R30,Y+15
0004df 89f8      	LDD  R31,Y+15+1
0004e0 9509      	ICALL
0004e1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x6:
0004e2 89e8      	LDD  R30,Y+16
0004e3 89f9      	LDD  R31,Y+16+1
0004e4 9734      	SBIW R30,4
0004e5 8be8      	STD  Y+16,R30
0004e6 8bf9      	STD  Y+16+1,R31
0004e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0004e8 85ad      	LDD  R26,Y+13
0004e9 85be      	LDD  R27,Y+13+1
0004ea 85ef      	LDD  R30,Y+15
0004eb 89f8      	LDD  R31,Y+15+1
0004ec 9509      	ICALL
0004ed 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x8:
0004ee 89a8      	LDD  R26,Y+16
0004ef 89b9      	LDD  R27,Y+16+1
0004f0 9614      	ADIW R26,4
0004f1 940e 06bb 	CALL __GETW1P
0004f3 83ee      	STD  Y+6,R30
0004f4 83ff      	STD  Y+6+1,R31
0004f5 81ae      	LDD  R26,Y+6
0004f6 81bf      	LDD  R27,Y+6+1
0004f7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x9:
0004f8 89a8      	LDD  R26,Y+16
0004f9 89b9      	LDD  R27,Y+16+1
0004fa 9614      	ADIW R26,4
0004fb 940e 06bb 	CALL __GETW1P
0004fd 87ea      	STD  Y+10,R30
0004fe 87fb      	STD  Y+10+1,R31
0004ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
000500 01de      	MOVW R26,R28
000501 961c      	ADIW R26,12
000502 940e 0601 	CALL __ADDW2R15
000504 940e 06bb 	CALL __GETW1P
000506 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000507 940e 03f9 	CALL __lcd_write_data
000509 e0a3      	LDI  R26,LOW(3)
00050a e0b0      	LDI  R27,0
00050b 940c 0515 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0xC:
00050d e3a0      	LDI  R26,LOW(48)
00050e 940e 03e5 	CALL __lcd_write_nibble_G101
                +
000510 ec88     +LDI R24 , LOW ( 200 )
000511 e090     +LDI R25 , HIGH ( 200 )
                +__DELAY_USW_LOOP :
000512 9701     +SBIW R24 , 1
000513 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 200
000514 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000515 9610      	adiw r26,0
000516 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000517 ed80     +LDI R24 , LOW ( 0x7D0 )
000518 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000519 9701     +SBIW R24 , 1
00051a f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
00051b 95a8      	wdr
00051c 9711      	sbiw r26,1
00051d f7c9      	brne __delay_ms0
                 __delay_ms1:
00051e 9508      	ret
                 
                 __ROUND_REPACK:
00051f 2355      	TST  R21
000520 f442      	BRPL __REPACK
000521 3850      	CPI  R21,0x80
000522 f411      	BRNE __ROUND_REPACK0
000523 ffe0      	SBRS R30,0
000524 c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000525 9631      	ADIW R30,1
000526 1f69      	ADC  R22,R25
000527 1f79      	ADC  R23,R25
000528 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000529 e850      	LDI  R21,0x80
00052a 2757      	EOR  R21,R23
00052b f411      	BRNE __REPACK0
00052c 935f      	PUSH R21
00052d c073      	RJMP __ZERORES
                 __REPACK0:
00052e 3f5f      	CPI  R21,0xFF
00052f f031      	BREQ __REPACK1
000530 0f66      	LSL  R22
000531 0c00      	LSL  R0
000532 9557      	ROR  R21
000533 9567      	ROR  R22
000534 2f75      	MOV  R23,R21
000535 9508      	RET
                 __REPACK1:
000536 935f      	PUSH R21
000537 2000      	TST  R0
000538 f00a      	BRMI __REPACK2
000539 c073      	RJMP __MAXRES
                 __REPACK2:
00053a c06c      	RJMP __MINRES
                 
                 __UNPACK:
00053b e850      	LDI  R21,0x80
00053c 2e19      	MOV  R1,R25
00053d 2215      	AND  R1,R21
00053e 0f88      	LSL  R24
00053f 1f99      	ROL  R25
000540 2795      	EOR  R25,R21
000541 0f55      	LSL  R21
000542 9587      	ROR  R24
                 
                 __UNPACK1:
000543 e850      	LDI  R21,0x80
000544 2e07      	MOV  R0,R23
000545 2205      	AND  R0,R21
000546 0f66      	LSL  R22
000547 1f77      	ROL  R23
000548 2775      	EOR  R23,R21
000549 0f55      	LSL  R21
00054a 9567      	ROR  R22
00054b 9508      	RET
                 
                 __CFD1U:
00054c 9468      	SET
00054d c001      	RJMP __CFD1U0
                 __CFD1:
00054e 94e8      	CLT
                 __CFD1U0:
00054f 935f      	PUSH R21
000550 dff2      	RCALL __UNPACK1
000551 3870      	CPI  R23,0x80
000552 f018      	BRLO __CFD10
000553 3f7f      	CPI  R23,0xFF
000554 f408      	BRCC __CFD10
000555 c04b      	RJMP __ZERORES
                 __CFD10:
000556 e156      	LDI  R21,22
000557 1b57      	SUB  R21,R23
000558 f4aa      	BRPL __CFD11
000559 9551      	NEG  R21
00055a 3058      	CPI  R21,8
00055b f40e      	BRTC __CFD19
00055c 3059      	CPI  R21,9
                 __CFD19:
00055d f030      	BRLO __CFD17
00055e efef      	SER  R30
00055f efff      	SER  R31
000560 ef6f      	SER  R22
000561 e77f      	LDI  R23,0x7F
000562 f977      	BLD  R23,7
000563 c01a      	RJMP __CFD15
                 __CFD17:
000564 2777      	CLR  R23
000565 2355      	TST  R21
000566 f0b9      	BREQ __CFD15
                 __CFD18:
000567 0fee      	LSL  R30
000568 1fff      	ROL  R31
000569 1f66      	ROL  R22
00056a 1f77      	ROL  R23
00056b 955a      	DEC  R21
00056c f7d1      	BRNE __CFD18
00056d c010      	RJMP __CFD15
                 __CFD11:
00056e 2777      	CLR  R23
                 __CFD12:
00056f 3058      	CPI  R21,8
000570 f028      	BRLO __CFD13
000571 2fef      	MOV  R30,R31
000572 2ff6      	MOV  R31,R22
000573 2f67      	MOV  R22,R23
000574 5058      	SUBI R21,8
000575 cff9      	RJMP __CFD12
                 __CFD13:
000576 2355      	TST  R21
000577 f031      	BREQ __CFD15
                 __CFD14:
000578 9576      	LSR  R23
000579 9567      	ROR  R22
00057a 95f7      	ROR  R31
00057b 95e7      	ROR  R30
00057c 955a      	DEC  R21
00057d f7d1      	BRNE __CFD14
                 __CFD15:
00057e 2000      	TST  R0
00057f f40a      	BRPL __CFD16
000580 d092      	RCALL __ANEGD1
                 __CFD16:
000581 915f      	POP  R21
000582 9508      	RET
                 
                 __CDF1U:
000583 9468      	SET
000584 c001      	RJMP __CDF1U0
                 __CDF1:
000585 94e8      	CLT
                 __CDF1U0:
000586 9730      	SBIW R30,0
000587 4060      	SBCI R22,0
000588 4070      	SBCI R23,0
000589 f0b1      	BREQ __CDF10
00058a 2400      	CLR  R0
00058b f026      	BRTS __CDF11
00058c 2377      	TST  R23
00058d f412      	BRPL __CDF11
00058e 9400      	COM  R0
00058f d083      	RCALL __ANEGD1
                 __CDF11:
000590 2e17      	MOV  R1,R23
000591 e17e      	LDI  R23,30
000592 2011      	TST  R1
                 __CDF12:
000593 f032      	BRMI __CDF13
000594 957a      	DEC  R23
000595 0fee      	LSL  R30
000596 1fff      	ROL  R31
000597 1f66      	ROL  R22
000598 1c11      	ROL  R1
000599 cff9      	RJMP __CDF12
                 __CDF13:
00059a 2fef      	MOV  R30,R31
00059b 2ff6      	MOV  R31,R22
00059c 2d61      	MOV  R22,R1
00059d 935f      	PUSH R21
00059e df8a      	RCALL __REPACK
00059f 915f      	POP  R21
                 __CDF10:
0005a0 9508      	RET
                 
                 __ZERORES:
0005a1 27ee      	CLR  R30
0005a2 27ff      	CLR  R31
0005a3 2766      	CLR  R22
0005a4 2777      	CLR  R23
0005a5 915f      	POP  R21
0005a6 9508      	RET
                 
                 __MINRES:
0005a7 efef      	SER  R30
0005a8 efff      	SER  R31
0005a9 e76f      	LDI  R22,0x7F
0005aa ef7f      	SER  R23
0005ab 915f      	POP  R21
0005ac 9508      	RET
                 
                 __MAXRES:
0005ad efef      	SER  R30
0005ae efff      	SER  R31
0005af e76f      	LDI  R22,0x7F
0005b0 e77f      	LDI  R23,0x7F
0005b1 915f      	POP  R21
0005b2 9508      	RET
                 
                 __MULF12:
0005b3 935f      	PUSH R21
0005b4 df86      	RCALL __UNPACK
0005b5 3870      	CPI  R23,0x80
0005b6 f351      	BREQ __ZERORES
0005b7 3890      	CPI  R25,0x80
0005b8 f341      	BREQ __ZERORES
0005b9 2401      	EOR  R0,R1
0005ba 9408      	SEC
0005bb 1f79      	ADC  R23,R25
0005bc f423      	BRVC __MULF124
0005bd f31c      	BRLT __ZERORES
                 __MULF125:
0005be 2000      	TST  R0
0005bf f33a      	BRMI __MINRES
0005c0 cfec      	RJMP __MAXRES
                 __MULF124:
0005c1 920f      	PUSH R0
0005c2 931f      	PUSH R17
0005c3 932f      	PUSH R18
0005c4 933f      	PUSH R19
0005c5 934f      	PUSH R20
0005c6 2711      	CLR  R17
0005c7 2722      	CLR  R18
0005c8 2799      	CLR  R25
0005c9 9f68      	MUL  R22,R24
0005ca 01a0      	MOVW R20,R0
0005cb 9f8f      	MUL  R24,R31
0005cc 2d30      	MOV  R19,R0
0005cd 0d41      	ADD  R20,R1
0005ce 1f59      	ADC  R21,R25
0005cf 9f6b      	MUL  R22,R27
0005d0 0d30      	ADD  R19,R0
0005d1 1d41      	ADC  R20,R1
0005d2 1f59      	ADC  R21,R25
0005d3 9f8e      	MUL  R24,R30
0005d4 d027      	RCALL __MULF126
0005d5 9fbf      	MUL  R27,R31
0005d6 d025      	RCALL __MULF126
0005d7 9f6a      	MUL  R22,R26
0005d8 d023      	RCALL __MULF126
0005d9 9fbe      	MUL  R27,R30
0005da d01d      	RCALL __MULF127
0005db 9faf      	MUL  R26,R31
0005dc d01b      	RCALL __MULF127
0005dd 9fae      	MUL  R26,R30
0005de 0d11      	ADD  R17,R1
0005df 1f29      	ADC  R18,R25
0005e0 1f39      	ADC  R19,R25
0005e1 1f49      	ADC  R20,R25
0005e2 1f59      	ADC  R21,R25
0005e3 2fe3      	MOV  R30,R19
0005e4 2ff4      	MOV  R31,R20
0005e5 2f65      	MOV  R22,R21
0005e6 2f52      	MOV  R21,R18
0005e7 914f      	POP  R20
0005e8 913f      	POP  R19
0005e9 912f      	POP  R18
0005ea 911f      	POP  R17
0005eb 900f      	POP  R0
0005ec 2366      	TST  R22
0005ed f02a      	BRMI __MULF122
0005ee 0f55      	LSL  R21
0005ef 1fee      	ROL  R30
0005f0 1fff      	ROL  R31
0005f1 1f66      	ROL  R22
0005f2 c002      	RJMP __MULF123
                 __MULF122:
0005f3 9573      	INC  R23
0005f4 f24b      	BRVS __MULF125
                 __MULF123:
0005f5 df29      	RCALL __ROUND_REPACK
0005f6 915f      	POP  R21
0005f7 9508      	RET
                 
                 __MULF127:
0005f8 0d10      	ADD  R17,R0
0005f9 1d21      	ADC  R18,R1
0005fa 1f39      	ADC  R19,R25
0005fb c002      	RJMP __MULF128
                 __MULF126:
0005fc 0d20      	ADD  R18,R0
0005fd 1d31      	ADC  R19,R1
                 __MULF128:
0005fe 1f49      	ADC  R20,R25
0005ff 1f59      	ADC  R21,R25
000600 9508      	RET
                 
                 __ADDW2R15:
000601 2400      	CLR  R0
000602 0daf      	ADD  R26,R15
000603 1db0      	ADC  R27,R0
000604 9508      	RET
                 
                 __ADDD12:
000605 0fea      	ADD  R30,R26
000606 1ffb      	ADC  R31,R27
000607 1f68      	ADC  R22,R24
000608 1f79      	ADC  R23,R25
000609 9508      	RET
                 
                 __SUBD12:
00060a 1bea      	SUB  R30,R26
00060b 0bfb      	SBC  R31,R27
00060c 0b68      	SBC  R22,R24
00060d 0b79      	SBC  R23,R25
00060e 9508      	RET
                 
                 __ANEGW1:
00060f 95f1      	NEG  R31
000610 95e1      	NEG  R30
000611 40f0      	SBCI R31,0
000612 9508      	RET
                 
                 __ANEGD1:
000613 95f0      	COM  R31
000614 9560      	COM  R22
000615 9570      	COM  R23
000616 95e1      	NEG  R30
000617 4fff      	SBCI R31,-1
000618 4f6f      	SBCI R22,-1
000619 4f7f      	SBCI R23,-1
00061a 9508      	RET
                 
                 __ASRW8:
00061b 2fef      	MOV  R30,R31
00061c 27ff      	CLR  R31
00061d fde7      	SBRC R30,7
00061e efff      	SER  R31
00061f 9508      	RET
                 
                 __CWD1:
000620 2f6f      	MOV  R22,R31
000621 0f66      	ADD  R22,R22
000622 0b66      	SBC  R22,R22
000623 2f76      	MOV  R23,R22
000624 9508      	RET
                 
                 __MULD12U:
000625 9f7a      	MUL  R23,R26
000626 2d70      	MOV  R23,R0
000627 9f6b      	MUL  R22,R27
000628 0d70      	ADD  R23,R0
000629 9ff8      	MUL  R31,R24
00062a 0d70      	ADD  R23,R0
00062b 9fe9      	MUL  R30,R25
00062c 0d70      	ADD  R23,R0
00062d 9f6a      	MUL  R22,R26
00062e 2d60      	MOV  R22,R0
00062f 0d71      	ADD  R23,R1
000630 9ffb      	MUL  R31,R27
000631 0d60      	ADD  R22,R0
000632 1d71      	ADC  R23,R1
000633 9fe8      	MUL  R30,R24
000634 0d60      	ADD  R22,R0
000635 1d71      	ADC  R23,R1
000636 2788      	CLR  R24
000637 9ffa      	MUL  R31,R26
000638 2df0      	MOV  R31,R0
000639 0d61      	ADD  R22,R1
00063a 1f78      	ADC  R23,R24
00063b 9feb      	MUL  R30,R27
00063c 0df0      	ADD  R31,R0
00063d 1d61      	ADC  R22,R1
00063e 1f78      	ADC  R23,R24
00063f 9fea      	MUL  R30,R26
000640 2de0      	MOV  R30,R0
000641 0df1      	ADD  R31,R1
000642 1f68      	ADC  R22,R24
000643 1f78      	ADC  R23,R24
000644 9508      	RET
                 
                 __MULD12:
000645 d062      	RCALL __CHKSIGND
000646 dfde      	RCALL __MULD12U
000647 f40e      	BRTC __MULD121
000648 dfca      	RCALL __ANEGD1
                 __MULD121:
000649 9508      	RET
                 
                 __DIVW21U:
00064a 2400      	CLR  R0
00064b 2411      	CLR  R1
00064c e190      	LDI  R25,16
                 __DIVW21U1:
00064d 0faa      	LSL  R26
00064e 1fbb      	ROL  R27
00064f 1c00      	ROL  R0
000650 1c11      	ROL  R1
000651 1a0e      	SUB  R0,R30
000652 0a1f      	SBC  R1,R31
000653 f418      	BRCC __DIVW21U2
000654 0e0e      	ADD  R0,R30
000655 1e1f      	ADC  R1,R31
000656 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000657 60a1      	SBR  R26,1
                 __DIVW21U3:
000658 959a      	DEC  R25
000659 f799      	BRNE __DIVW21U1
00065a 01fd      	MOVW R30,R26
00065b 01d0      	MOVW R26,R0
00065c 9508      	RET
                 
                 __DIVW21:
00065d d03c      	RCALL __CHKSIGNW
00065e dfeb      	RCALL __DIVW21U
00065f f40e      	BRTC __DIVW211
000660 dfae      	RCALL __ANEGW1
                 __DIVW211:
000661 9508      	RET
                 
                 __DIVD21U:
000662 933f      	PUSH R19
000663 934f      	PUSH R20
000664 935f      	PUSH R21
000665 2400      	CLR  R0
000666 2411      	CLR  R1
000667 2744      	CLR  R20
000668 2755      	CLR  R21
000669 e230      	LDI  R19,32
                 __DIVD21U1:
00066a 0faa      	LSL  R26
00066b 1fbb      	ROL  R27
00066c 1f88      	ROL  R24
00066d 1f99      	ROL  R25
00066e 1c00      	ROL  R0
00066f 1c11      	ROL  R1
000670 1f44      	ROL  R20
000671 1f55      	ROL  R21
000672 1a0e      	SUB  R0,R30
000673 0a1f      	SBC  R1,R31
000674 0b46      	SBC  R20,R22
000675 0b57      	SBC  R21,R23
000676 f428      	BRCC __DIVD21U2
000677 0e0e      	ADD  R0,R30
000678 1e1f      	ADC  R1,R31
000679 1f46      	ADC  R20,R22
00067a 1f57      	ADC  R21,R23
00067b c001      	RJMP __DIVD21U3
                 __DIVD21U2:
00067c 60a1      	SBR  R26,1
                 __DIVD21U3:
00067d 953a      	DEC  R19
00067e f759      	BRNE __DIVD21U1
00067f 01fd      	MOVW R30,R26
000680 01bc      	MOVW R22,R24
000681 01d0      	MOVW R26,R0
000682 01ca      	MOVW R24,R20
000683 915f      	POP  R21
000684 914f      	POP  R20
000685 913f      	POP  R19
000686 9508      	RET
                 
                 __DIVD21:
000687 d020      	RCALL __CHKSIGND
000688 dfd9      	RCALL __DIVD21U
000689 f40e      	BRTC __DIVD211
00068a df88      	RCALL __ANEGD1
                 __DIVD211:
00068b 9508      	RET
                 
                 __MODW21:
00068c 94e8      	CLT
00068d ffb7      	SBRS R27,7
00068e c004      	RJMP __MODW211
00068f 95a0      	COM  R26
000690 95b0      	COM  R27
000691 9611      	ADIW R26,1
000692 9468      	SET
                 __MODW211:
000693 fdf7      	SBRC R31,7
000694 df7a      	RCALL __ANEGW1
000695 dfb4      	RCALL __DIVW21U
000696 01fd      	MOVW R30,R26
000697 f40e      	BRTC __MODW212
000698 df76      	RCALL __ANEGW1
                 __MODW212:
000699 9508      	RET
                 
                 __CHKSIGNW:
00069a 94e8      	CLT
00069b fff7      	SBRS R31,7
00069c c002      	RJMP __CHKSW1
00069d df71      	RCALL __ANEGW1
00069e 9468      	SET
                 __CHKSW1:
00069f ffb7      	SBRS R27,7
0006a0 c006      	RJMP __CHKSW2
0006a1 95a0      	COM  R26
0006a2 95b0      	COM  R27
0006a3 9611      	ADIW R26,1
0006a4 f800      	BLD  R0,0
0006a5 9403      	INC  R0
0006a6 fa00      	BST  R0,0
                 __CHKSW2:
0006a7 9508      	RET
                 
                 __CHKSIGND:
0006a8 94e8      	CLT
0006a9 ff77      	SBRS R23,7
0006aa c002      	RJMP __CHKSD1
0006ab df67      	RCALL __ANEGD1
0006ac 9468      	SET
                 __CHKSD1:
0006ad ff97      	SBRS R25,7
0006ae c00b      	RJMP __CHKSD2
0006af 2400      	CLR  R0
0006b0 95a0      	COM  R26
0006b1 95b0      	COM  R27
0006b2 9580      	COM  R24
0006b3 9590      	COM  R25
0006b4 9611      	ADIW R26,1
0006b5 1d80      	ADC  R24,R0
0006b6 1d90      	ADC  R25,R0
0006b7 f800      	BLD  R0,0
0006b8 9403      	INC  R0
0006b9 fa00      	BST  R0,0
                 __CHKSD2:
0006ba 9508      	RET
                 
                 __GETW1P:
0006bb 91ed      	LD   R30,X+
0006bc 91fc      	LD   R31,X
0006bd 9711      	SBIW R26,1
0006be 9508      	RET
                 
                 __GETW1PF:
0006bf 9005      	LPM  R0,Z+
0006c0 91f4      	LPM  R31,Z
0006c1 2de0      	MOV  R30,R0
0006c2 9508      	RET
                 
                 __PUTD1S0:
0006c3 83e8      	ST   Y,R30
0006c4 83f9      	STD  Y+1,R31
0006c5 836a      	STD  Y+2,R22
0006c6 837b      	STD  Y+3,R23
0006c7 9508      	RET
                 
                 __PUTPARD1:
0006c8 937a      	ST   -Y,R23
0006c9 936a      	ST   -Y,R22
0006ca 93fa      	ST   -Y,R31
0006cb 93ea      	ST   -Y,R30
0006cc 9508      	RET
                 
                 __PUTPARD2:
0006cd 939a      	ST   -Y,R25
0006ce 938a      	ST   -Y,R24
0006cf 93ba      	ST   -Y,R27
0006d0 93aa      	ST   -Y,R26
0006d1 9508      	RET
                 
                 __CPW02:
0006d2 2400      	CLR  R0
0006d3 160a      	CP   R0,R26
0006d4 060b      	CPC  R0,R27
0006d5 9508      	RET
                 
                 __SAVELOCR6:
0006d6 935a      	ST   -Y,R21
                 __SAVELOCR5:
0006d7 934a      	ST   -Y,R20
                 __SAVELOCR4:
0006d8 933a      	ST   -Y,R19
                 __SAVELOCR3:
0006d9 932a      	ST   -Y,R18
                 __SAVELOCR2:
0006da 931a      	ST   -Y,R17
0006db 930a      	ST   -Y,R16
0006dc 9508      	RET
                 
                 __LOADLOCR6:
0006dd 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
0006de 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
0006df 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0006e0 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0006e1 8119      	LDD  R17,Y+1
0006e2 8108      	LD   R16,Y
0006e3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  61 r1 :  29 r2 :   0 r3 :   0 r4 :   3 r5 :   4 r6 :   6 r7 :   3 
r8 :   6 r9 :   3 r10:   6 r11:   3 r12:   6 r13:   3 r14:   0 r15:   6 
r16:  38 r17:  31 r18:  36 r19:  20 r20:  24 r21:  67 r22:  60 r23:  58 
r24:  57 r25:  43 r26: 147 r27:  70 r28:  27 r29:   1 r30: 337 r31: 130 
x  :  29 y  : 239 z  :  15 
Registers used: 32 out of 35 (91.4%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  32 add   :  21 
adiw  :  39 and   :   2 andi  :   7 asr   :   0 bclr  :   0 bld   :   3 
brbc  :   0 brbs  :   0 brcc  :   3 brcs  :   0 break :   0 breq  :  25 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  11 
brlt  :   3 brmi  :   5 brne  :  39 brpl  :   5 brsh  :   2 brtc  :   5 
brts  :   1 brvc  :   1 brvs  :   2 bset  :   0 bst   :   2 call  :  99 
cbi   :   5 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  45 cls   :   0 clt   :   5 clv   :   0 clz   :   0 com   :  12 
cp    :  12 cpc   :   8 cpi   :  43 cpse  :   0 dec   :  10 des   :   0 
eor   :   4 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   6 inc   :   4 jmp   :  24 ld    :  44 ldd   : 103 ldi   : 174 
lds   :  18 lpm   :  14 lsl   :  11 lsr   :   1 mov   :  38 movw  :  38 
mul   :  20 muls  :   0 mulsu :   0 neg   :   4 nop   :   0 or    :   1 
ori   :   8 out   :  51 pop   :  23 push  :  22 rcall :  45 ret   :  60 
reti  :   1 rjmp  :  98 rol   :  21 ror   :   7 sbc   :   9 sbci  :   7 
sbi   :   5 sbic  :   4 sbis  :   0 sbiw  :  27 sbr   :   2 sbrc  :   4 
sbrs  :  16 sec   :   1 seh   :   0 sei   :   1 sen   :   0 ser   :   9 
ses   :   0 set   :   5 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  90 std   :  34 sts   :  13 sub   :   5 subi  :  19 swap  :   1 
tst   :  13 wdr   :   1 
Instructions used: 77 out of 116 (66.4%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000dc8   3424    104   3528   16384  21.5%
[.dseg] 0x000060 0x00016d      0     13     13    1024   1.3%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 12 warnings
