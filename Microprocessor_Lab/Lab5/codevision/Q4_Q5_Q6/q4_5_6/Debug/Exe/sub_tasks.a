;#include "sub_tasks.h"
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;int timer2OF_counter = 0;
;
;//question6 variables
;bool has_timer1_overflow = false;
;int ICR1L_DATA, ICR1H_DATA;
;int ICR_DATA1 = 0, ICR_DATA2 = 0;
;float period;
;int old_speed = 0, new_speed = 0, lcd_display_limit = 0;
;char lcd_output[16];
;// Declare your global variables here
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0001 0010 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0011     has_timer1_overflow = true;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0001 0012 // Place your code here
; 0001 0013 
; 0001 0014 }
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;
;// Timer1 input capture interrupt service routine
;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
; 0001 0018 {
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0001 0019     q6_handle_timer1_capture();
;PCODE: $00000016 VOL: 0
; 0001 001A // Place your code here
; 0001 001B 
; 0001 001C }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;
;// Timer2 overflow interrupt service routine
;interrupt [TIM2_OVF] void timer2_ovf_isr(void)
; 0001 0020 {
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0001 0021     TCNT2 = 0x06;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0001 0022     timer2OF_counter++;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0023 
; 0001 0024     if (timer2OF_counter == 26) // counter should go to 25 in order to have 100ms
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0001 0025         timer2OF_counter = 0;
;PCODE: $00000024 VOL: 0
; 0001 0026 // Reinitialize Timer2 value
; 0001 0027 //TCNT2=0x06;
; 0001 0028 // Place your code here
; 0001 0029 
; 0001 002A }
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;void q3_custom_pwm_wave(int custom_duty)
; 0001 002D {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0001 002E     OCR0 = (custom_duty * 2.55) + 0.5;
;PCODE: $0000002B VOL: 0
;	custom_duty -> Y+0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0001 002F }
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;
;void q4_subTask()
; 0001 0032 {
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0001 0033     // OCR0 = 2.55 * duty-cycle (approximately)
; 0001 0034     // duty-cycle = (100/255) * port_data
; 0001 0035     // => OCR0 = port_data
; 0001 0036     OCR0 = PINA;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0037 }
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;
;void q5_subTask()
; 0001 003A {
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0001 003B     // step = 10 => pulse per cycle = 360/10 = 36
; 0001 003C     // Speed(rpm) = S
; 0001 003D     // T or Time between sending pulse = 100ms=0.1s => 0.1 = 60 / (S * 36) => S=16
; 0001 003E     lcd_gotoxy(0, 0);
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
; 0001 003F     lcd_puts("S(SP): 16rpm");
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0001 0040     two_phase_step();
;PCODE: $00000046 VOL: 0
; 0001 0041     PORTB = 0x00;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0001 0042     delay_ms(500);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0001 0043     two_phase_step_reverse();
;PCODE: $0000004B VOL: 0
; 0001 0044     delay_ms(500);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0001 0045     PORTB = 0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 0046     lcd_clear();
;PCODE: $00000050 VOL: 0
; 0001 0047 }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0

	.DSEG
_0x20004:
	.BYTE 0xD
;
;void two_phase_step()
; 0001 004A {

	.CSEG
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0001 004B     PORTB = 0x30;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0001 004C     timer2OF_counter = 0;
;PCODE: $00000057 VOL: 0
; 0001 004D     while (timer2OF_counter < 25)
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 004E         ;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0001 004F     PORTB = 0x60;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0001 0050     timer2OF_counter = 0;
;PCODE: $00000060 VOL: 0
; 0001 0051     while (timer2OF_counter < 25)
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0001 0052         ;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0001 0053     PORTB = 0xc0;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0001 0054     timer2OF_counter = 0;
;PCODE: $00000069 VOL: 0
; 0001 0055     while (timer2OF_counter < 25)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0001 0056         ;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0001 0057     PORTB = 0x90;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0001 0058     timer2OF_counter = 0;
;PCODE: $00000072 VOL: 0
; 0001 0059     while (timer2OF_counter < 25)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 005A         ;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 005B }
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;
;void two_phase_step_reverse()
; 0001 005E {
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 005F     PORTB = 0xc0;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0060     timer2OF_counter = 0;
;PCODE: $0000007F VOL: 0
; 0001 0061     while (timer2OF_counter < 25)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0062         ;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0001 0063     PORTB = 0x60;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0001 0064     timer2OF_counter = 0;
;PCODE: $00000088 VOL: 0
; 0001 0065     while (timer2OF_counter < 25)
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 0066         ;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0001 0067     PORTB = 0x30;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 0068     timer2OF_counter = 0;
;PCODE: $00000091 VOL: 0
; 0001 0069     while (timer2OF_counter < 25)
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0001 006A         ;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0001 006B     PORTB = 0x90;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 006C     timer2OF_counter = 0;
;PCODE: $0000009A VOL: 0
; 0001 006D     while (timer2OF_counter < 25)
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0001 006E         ;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0001 006F }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;
;void q6_handle_timer1_capture()
; 0001 0072 {
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0001 0073     if (has_timer1_overflow == true)
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0001 0074     {
; 0001 0075         has_timer1_overflow = false;
;PCODE: $000000A8 VOL: 0
; 0001 0076         return;
;PCODE: $000000A9 VOL: 0
; 0001 0077     }
; 0001 0078 
; 0001 0079     ICR1L_DATA = ICR1L;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0001 007A     ICR1H_DATA = ICR1H;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0001 007B 
; 0001 007C     ICR_DATA2 = (ICR1H_DATA << 8) | ICR1L_DATA;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0001 007D     period = ICR_DATA2 - ICR_DATA1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0001 007E     ICR_DATA1 = ICR_DATA2; // to keep last ICR data
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0001 007F 
; 0001 0080     // dc motor : 50 pulse per revolution
; 0001 0081     // period = duration of one pulse(in us)
; 0001 0082     // rpm = revolution per minute(60 seconds)
; 0001 0083     // => speed(rpm) = 60 / ((period/1000000) * 50)
; 0001 0084     new_speed = (60 * 1000000) / (period * 50);
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0001 0085 
; 0001 0086     if (has_speeds_difference(old_speed, new_speed))
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 0087     {
; 0001 0088         if (lcd_display_limit == 5)
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0001 0089         {
; 0001 008A 
; 0001 008B             old_speed = new_speed;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0001 008C             print_dc_motor_speed(new_speed);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0001 008D             lcd_display_limit = 0;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0001 008E         }
; 0001 008F         else
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0001 0090         {
; 0001 0091             lcd_display_limit++;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0001 0092         }
;PCODE: $000000D9 VOL: 0
; 0001 0093     }
; 0001 0094 }
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;
;void print_dc_motor_speed(int speed)
; 0001 0097 {
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0001 0098     sprintf(lcd_output, "S(DC)=%d rpm", speed);
;PCODE: $000000DF VOL: 0
;	speed -> Y+0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 0099     lcd_gotoxy(0, 1);
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0001 009A     lcd_puts(lcd_output);
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0001 009B }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;
;bool has_speeds_difference(int old_speed, int new_speed)
; 0001 009E {
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0001 009F     return (old_speed - new_speed >= 5) || (old_speed - new_speed <= -5);
;PCODE: $000000F7 VOL: 0
;	old_speed -> Y+2
;	new_speed -> Y+0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0001 00A0 }
;PCODE: $00000108 VOL: 0
;
;void init_program_configs()
; 0001 00A3 {
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0001 00A4     init_ports();
;PCODE: $0000010B VOL: 0
; 0001 00A5     init_timers();
;PCODE: $0000010C VOL: 0
; 0001 00A6     init_interrupts();
;PCODE: $0000010D VOL: 0
; 0001 00A7     init_lcd();
;PCODE: $0000010E VOL: 0
; 0001 00A8 }
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;
;void init_ports()
; 0001 00AB {
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0001 00AC     // Input/Output Ports initialization
; 0001 00AD     // Port A initialization
; 0001 00AE     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00AF     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0) ...
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0001 00B0     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00B1     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0001 00B2 
; 0001 00B3     // Port B initialization
; 0001 00B4     // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
; 0001 00B5     DDRB = 0xf8;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 00B6     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
; 0001 00B7     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0001 00B8 
; 0001 00B9     // Port C initialization
; 0001 00BA     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00BB     DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0) ...
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0001 00BC     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00BD     PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1 ...
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0001 00BE 
; 0001 00BF     // Port D initialization
; 0001 00C0     // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0001 00C1     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 00C2     // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0001 00C3     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1 ...
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0001 00C4 }
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;
;void init_lcd()
; 0001 00C7 {
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0001 00C8     // Alphanumeric LCD initialization
; 0001 00C9     // Connections are specified in the
; 0001 00CA     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0001 00CB     // RS - PORTC Bit 0
; 0001 00CC     // RD - PORTC Bit 1
; 0001 00CD     // EN - PORTC Bit 2
; 0001 00CE     // D4 - PORTC Bit 4
; 0001 00CF     // D5 - PORTC Bit 5
; 0001 00D0     // D6 - PORTC Bit 6
; 0001 00D1     // D7 - PORTC Bit 7
; 0001 00D2     // Characters/line: 16
; 0001 00D3     lcd_init(16);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0001 00D4 }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;void init_timers()
; 0001 00D7 {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0001 00D8     // Timer/Counter 0 initialization
; 0001 00D9     // Clock source: System Clock
; 0001 00DA     // Clock value: 1000.000 kHz
; 0001 00DB     // Mode: Phase correct PWM top=0xFF
; 0001 00DC     // OC0 output: Non-Inverted PWM
; 0001 00DD     // Timer Period: 0.51 ms
; 0001 00DE     // Output Pulse(s):
; 0001 00DF     // OC0 Period: 0.51 ms Width: 0.052 ms
; 0001 00E0     TCCR0 = (1 << WGM00) | (1 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (1 << CS01) | (0 << CS00);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 00E1     TCNT0 = 0x00;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 00E2     OCR0 = 0x1A;
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0001 00E3 
; 0001 00E4     // Timer/Counter 1 initialization
; 0001 00E5     // Clock source: System Clock
; 0001 00E6     // Clock value: 1000.000 kHz
; 0001 00E7     // Mode: Normal top=0xFFFF
; 0001 00E8     // OC1A output: Disconnected
; 0001 00E9     // OC1B output: Disconnected
; 0001 00EA     // Noise Canceler: Off
; 0001 00EB     // Input Capture on Falling Edge
; 0001 00EC     // Timer Period: 10 ms
; 0001 00ED     // Timer1 Overflow Interrupt: On
; 0001 00EE     // Input Capture Interrupt: On
; 0001 00EF     // Compare A Match Interrupt: Off
; 0001 00F0     // Compare B Match Interrupt: Off
; 0001 00F1     TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0001 00F2     TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0001 00F3     // TCNT1L = 0xF0;
; 0001 00F4     // TCNT1H = 0xD8;
; 0001 00F5     TCNT1H = 0x00;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0001 00F6     TCNT1L = 0x00;
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0001 00F7     ICR1H = 0x00;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0001 00F8     ICR1L = 0x00;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 00F9     OCR1AH = 0x00;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0001 00FA     OCR1AL = 0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0001 00FB     OCR1BH = 0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0001 00FC     OCR1BL = 0x00;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0001 00FD 
; 0001 00FE     // Timer/Counter 2 initialization
; 0001 00FF     // Clock source: System Clock
; 0001 0100     // Clock value: 62.500 kHz
; 0001 0101     // Mode: Normal top=0xFF
; 0001 0102     // OC2 output: Disconnected
; 0001 0103     // Timer Period: 4 ms
; 0001 0104     ASSR = 0 << AS2;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0001 0105     TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (1 << CS22) | (0 << CS21) | (1 << CS20);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0001 0106     TCNT2 = 0x06;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0001 0107     OCR2 = 0x00;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0001 0108 
; 0001 0109     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0001 010A     TIMSK = (0 << OCIE2) | (1 << TOIE2) | (1 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (1 << TOIE1) | (0 << OCIE0) |  ...
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0001 010B }
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;
;void init_interrupts()
; 0001 010E {
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0001 010F     // External Interrupt(s) initialization
; 0001 0110     // INT0 : Off
; 0001 0111     // INT1: Off
; 0001 0112     // INT2: Off
; 0001 0113 
; 0001 0114     MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 0115     MCUCSR = (0 << ISC2);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0001 0116 }
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;
