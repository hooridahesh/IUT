/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 20/05/2023
Author  : 
Company : 
Comments: 


Chip type               : ATmega16
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 256
*******************************************************/

#include <mega16.h>

// Alphanumeric LCD functions
#include <alcd.h>

#include <delay.h>
#include <stdio.h>
#include <stdbool.h>

void init_program_configs();
void init_lcd();
void init_timers();
void init_interrupts();
void init_ports();

void init_program_configs()
{
    init_ports();
    init_timers();
    init_interrupts();
    init_lcd();
}

void init_ports()
{
    // Input/Output Ports initialization
    // Port A initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (0 << DDA0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1) | (0 << PORTA0);

    // Port B initialization
    // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=In Bit1=In Bit0=In
    DDRB = 0xf8;
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
    PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1) | (0 << PORTB0);

    // Port C initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRC = (0 << DDC7) | (0 << DDC6) | (0 << DDC5) | (0 << DDC4) | (0 << DDC3) | (0 << DDC2) | (0 << DDC1) | (0 << DDC0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTC = (0 << PORTC7) | (0 << PORTC6) | (0 << PORTC5) | (0 << PORTC4) | (0 << PORTC3) | (0 << PORTC2) | (0 << PORTC1) | (0 << PORTC0);

    // Port D initialization
    // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
    DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0);
    // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
    PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (0 << PORTD2) | (0 << PORTD1) | (0 << PORTD0);
}

void init_lcd()
{
    // Alphanumeric LCD initialization
    // Connections are specified in the
    // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
    // RS - PORTC Bit 0
    // RD - PORTC Bit 1
    // EN - PORTC Bit 2
    // D4 - PORTC Bit 4
    // D5 - PORTC Bit 5
    // D6 - PORTC Bit 6
    // D7 - PORTC Bit 7
    // Characters/line: 16
    lcd_init(16);
}

void init_timers()
{
    // Timer/Counter 0 initialization
    // Clock source: System Clock
    // Clock value: 1000.000 kHz
    // Mode: Phase correct PWM top=0xFF
    // OC0 output: Non-Inverted PWM
    // Timer Period: 0.51 ms
    // Output Pulse(s):
    // OC0 Period: 0.51 ms Width: 0.052 ms
    TCCR0 = (1 << WGM00) | (1 << COM01) | (0 << COM00) | (0 << WGM01) | (0 << CS02) | (1 << CS01) | (0 << CS00);
    TCNT0 = 0x00;
    OCR0 = 0x1A;

    // Timer/Counter 1 initialization
    // Clock source: System Clock
    // Clock value: 1000.000 kHz
    // Mode: Normal top=0xFFFF
    // OC1A output: Disconnected
    // OC1B output: Disconnected
    // Noise Canceler: Off
    // Input Capture on Falling Edge
    // Timer Period: 10 ms
    // Timer1 Overflow Interrupt: On
    // Input Capture Interrupt: On
    // Compare A Match Interrupt: Off
    // Compare B Match Interrupt: Off
    TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
    TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (0 << CS12) | (1 << CS11) | (0 << CS10);
    // TCNT1L = 0xF0;
    // TCNT1H = 0xD8;
    TCNT1H = 0x00;
    TCNT1L = 0x00;
    ICR1H = 0x00;
    ICR1L = 0x00;
    OCR1AH = 0x00;
    OCR1AL = 0x00;
    OCR1BH = 0x00;
    OCR1BL = 0x00;

    // Timer/Counter 2 initialization
    // Clock source: System Clock
    // Clock value: 62.500 kHz
    // Mode: Normal top=0xFF
    // OC2 output: Disconnected
    // Timer Period: 4 ms
    ASSR = 0 << AS2;
    TCCR2 = (0 << PWM2) | (0 << COM21) | (0 << COM20) | (0 << CTC2) | (1 << CS22) | (0 << CS21) | (1 << CS20);
    TCNT2 = 0x06;
    OCR2 = 0x00;

    // Timer(s)/Counter(s) Interrupt(s) initialization
    TIMSK = (0 << OCIE2) | (1 << TOIE2) | (1 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (1 << TOIE1) | (0 << OCIE0) | (0 << TOIE0);
}

void init_interrupts()
{
    // External Interrupt(s) initialization
    // INT0 : Off
    // INT1: Off
    // INT2: Off

    MCUCR = (0 << ISC11) | (0 << ISC10) | (0 << ISC01) | (0 << ISC00);
    MCUCSR = (0 << ISC2);
}


void q3_custom_pwm_wave(int custom_duty);
void q4_subTask();
void q5_subTask();
void q6_handle_timer1_capture();

void two_phase_step();
void two_phase_step_reverse();
void print_dc_motor_speed(int speed);
bool has_speeds_difference(int old_speed, int new_speed);

int timer2OF_counter = 0;

//question6 variables
bool has_timer1_overflow = false;
int ICR1L_DATA, ICR1H_DATA;
int ICR_DATA1 = 0, ICR_DATA2 = 0;
float period;
int old_speed = 0, new_speed = 0, lcd_display_limit = 0;
char lcd_output[16];
// Declare your global variables here

// Timer1 overflow interrupt service routine
interrupt [TIM1_OVF] void timer1_ovf_isr(void)
{
    has_timer1_overflow = true;
// Place your code here

}

// Timer1 input capture interrupt service routine
interrupt [TIM1_CAPT] void timer1_capt_isr(void)
{
    q6_handle_timer1_capture();
// Place your code here

}

// Timer2 overflow interrupt service routine
interrupt [TIM2_OVF] void timer2_ovf_isr(void)
{
    TCNT2 = 0x06;
    timer2OF_counter++;

    if (timer2OF_counter == 26) // counter should go to 25 in order to have 100ms
        timer2OF_counter = 0;
// Reinitialize Timer2 value
//TCNT2=0x06;
// Place your code here

}

void q3_custom_pwm_wave(int custom_duty)
{
    OCR0 = (custom_duty * 2.55) + 0.5;
}

void q4_subTask()
{
    // OCR0 = 2.55 * duty-cycle (approximately)
    // duty-cycle = (100/255) * port_data
    // => OCR0 = port_data
    OCR0 = PINA;
}

void q5_subTask()
{
    // step = 10 => pulse per cycle = 360/10 = 36
    // Speed(rpm) = S
    // T or Time between sending pulse = 100ms=0.1s => 0.1 = 60 / (S * 36) => S=16
    lcd_gotoxy(0, 0);
    lcd_puts("S(SP): 16rpm");
    two_phase_step();
    PORTB = 0x00;
    delay_ms(500);
    two_phase_step_reverse();
    delay_ms(500);
    PORTB = 0x00;
    lcd_clear();
}

void two_phase_step()
{
    PORTB = 0x30;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0x60;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0xc0;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0x90;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
}

void two_phase_step_reverse()
{
    PORTB = 0xc0;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0x60;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0x30;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
    PORTB = 0x90;
    timer2OF_counter = 0;
    while (timer2OF_counter < 25)
        ;
}

void q6_handle_timer1_capture()
{
    if (has_timer1_overflow == true)
    {
        has_timer1_overflow = false;
        return;
    }

    ICR1L_DATA = ICR1L;
    ICR1H_DATA = ICR1H;

    ICR_DATA2 = (ICR1H_DATA << 8) | ICR1L_DATA;
    period = ICR_DATA2 - ICR_DATA1;
    ICR_DATA1 = ICR_DATA2; // to keep last ICR data

    // dc motor : 50 pulse per revolution
    // period = duration of one pulse(in us)
    // rpm = revolution per minute(60 seconds)
    // => speed(rpm) = 60 / ((period/1000000) * 50)
    new_speed = (60 * 1000000) / (period * 50);

    if (has_speeds_difference(old_speed, new_speed))
    {
        if (lcd_display_limit == 5)
        {

            old_speed = new_speed;
            print_dc_motor_speed(new_speed);
            lcd_display_limit = 0;
        }
        else
        {
            lcd_display_limit++;
        }
    }
}

void print_dc_motor_speed(int speed)
{
    sprintf(lcd_output, "S(DC)=%d rpm", speed);
    lcd_gotoxy(0, 1);
    lcd_puts(lcd_output);
}

bool has_speeds_difference(int old_speed, int new_speed)
{
    return (old_speed - new_speed >= 5) || (old_speed - new_speed <= -5);
}
void main(void)
{

#asm("sei");

  init_program_configs();
  q5_subTask();

  while (1)
  {
    q4_subTask();
  }
}
