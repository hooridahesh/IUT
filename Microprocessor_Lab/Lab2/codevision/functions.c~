#include <header.h>
/*
flash unsigned char num[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};


char part1(char port_in)
{
    char data_in;
    switch(port_in)
    {
        case portA:
            DDRA=0x00; // as input
            data_in=PINA;
            break ;
        case portB:
            DDRB=0x00; // as input
            data_in=PINB;
            break;
        case portC:
            DDRC=0x00; // as input
            data_in=PINC;
            break;
        case portD:
            DDRD=0x00; // as input
            data_in=PIND;
            break;
    }
    return data_in; // can be any data with unsigned int format
}


void part2(char port_out, char data_out)
{
    switch(port_out)
    {
        case portA:
            DDRA=0xFF; // as output
            PORTA=data_out;
            break;
        case portB:
            DDRB=0xFF; // as output
            PORTB=data_out;
            break;
        case portC:
            DDRC=0xFF; // as output
            PORTC=data_out;
            break;
        case portD:
            DDRD=0xFF; // as output
            PORTD=data_out;
            break;
    }
}


void part3(int number, int time)
{
    int i;
    PORTB=0x00;
    delay_ms(time);

    for(i = 0; i < number; i++)
    {
        part2(portB, 0xFF);
        delay_ms(time);
        part2(portB, 0x00);
        delay_ms(time);
    }
}


void part4(void) {
    char data;  
    data = part1(portA);
    part2(portB,data); 
}


void part5(int data, int data_port, int enable_data) {
    int i;
    int digit[4];
    
    digit[0] = data/1000;
    digit[1] = (data%1000)/100;
    digit[2] = (data%100)/10;
    digit[3] = data%10;
    
    for(i = 0; i < 4; i++) {
        switch(data_port)
        {
            case portA:
                DDRA=0xFF; // as output
                PORTA=num[digit[i]];
                break ;
            case portB:
                DDRB=0xFF; // as output
                PORTB=num[digit[i]];
                break;
            case portC:
                DDRC=0xFF; // as output
                PORTC=num[digit[i]];
                break;
            case portD:
                DDRD=0xFF; // as output
                PORTD=num[digit[i]];
                break;
        }
        
        switch(enable_data)
        {
            case portA:
                DDRA=0x0F; // as output
                PORTA |= 0x0F;//Unable all ports
                PORTA &= ~(1 << i);
                delay_ms(150);
                PORTA |= (1 << i);
                break ;
            case portB:
                DDRB=0x0F; // as output
                PORTB |= 0x0F;//Unable all ports
                PORTB &= ~(1 << i);
                delay_ms(150);
                PORTB |= (1 << i);
                break;
            case portC:
                DDRC=0x0F; // as output
                PORTC |= 0x0F;//Unable all ports
                PORTC &= ~(1 << i);
                delay_ms(150);
                PORTC |= (1 << i);
                break;
            case portD:
                DDRD=0x0F; // as output
                PORTD |= 0x0F;//Unable all ports 
                PORTD &= ~(1 << i);
                delay_ms(150);
                PORTD |= (1 << i);
                break;
        }
   }
}
*/

extern unsigned int sevenSeg[10] = {
    0b00111111, // number 0 on 7_seg
    0b00000110, // number 1 on 7_seg
    0b01011011, // number 2 on 7_seg
    0b01001111, // number 3 on 7_seg
    0b01100110, // number 4 on 7_seg
    0b01101101, // number 5 on 7_seg
    0b01111101, // number 6 on 7_seg
    0b00000111, // number 7 on 7_seg
    0b01111111, // number 8 on 7_seg
    0b01101111, // number 9 on 7_seg
};

int readData(char selected_port){
int data = 0;

  switch(selected_port){
    case portA:
    DDRA=0x00;
    data =PINA;
    break;      
    
    case portB:
    DDRB=0x00;
    data =PINB;
    break;
    
    case portC:
    DDRC=0x00;
    data =PINC;
    break;
    
    case portD:
    DDRD=0x00;
    data =PIND;
    break;
  }    
  
  return data;
}


void writeData(int data, char selected_port){

  switch(selected_port){
    case portA:
    DDRA=0xFF;
    PORTA =data;
    break;      
    
    case portB:
    DDRB=0xFF;
     PORTB =data;
    break;
    
    case portC:
    DDRC=0xFF;
     PORTC =data;
    break;
    
    case portD:
    DDRD=0xFF;
     PORTD =data;
    break;
  }    
  

}

void toggleAllLEDS(int counter,int delay_interval){
int i;

    for(i=0;i<counter;i++){
        writeData(0b00000000,portB);
        delay_ms(delay_interval);
        writeData(0b11111111,portB);
        delay_ms(delay_interval);
    }    
}

void showSwitchData(){
int data;
        data = readData(portA);
        delay_ms(20);
        writeData(data,portB);
        delay_ms(20);
}

void showSevenSegData(int data,char data_port,int enable_data){
int h,s,d,y,i;

        h = data / 1000;
        s = (data % 1000) / 100;
        d = (data % 100) / 10;
        y = data % 10;
  while(1){  
    writeData(0b0111,enable_data);
    writeData(sevenSeg[y],data_port);  
    delay_ms(45);
    writeData(0b0000,enable_data);
    
    writeData(0b1011,enable_data);
    writeData(sevenSeg[d],data_port);  
    delay_ms(45);
    writeData(0b0000,enable_data);
    
    writeData(0b1101,enable_data);
    writeData(sevenSeg[s],data_port);  
    delay_ms(45);
    writeData(0b0000,enable_data);
    
    writeData(0b1110,enable_data);
    writeData(sevenSeg[h],data_port);  
    delay_ms(45);
    writeData(0b0000,enable_data);
                                                                                               
 }
}
