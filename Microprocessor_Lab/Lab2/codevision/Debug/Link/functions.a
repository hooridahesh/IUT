;#include <header.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;flash unsigned char num[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};
;
;
;char part1(char port_in)
; 0001 0006 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0001 0007     char data_in;
; 0001 0008     switch(port_in)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	port_in -> Y+1
;	data_in -> R17
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0001 0009     {
; 0001 000A         case portA:
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0001 000B             DDRA=0x00; // as input
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0001 000C             data_in=PINA;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0001 000D             break ;
;PCODE: $00000019 VOL: 0
; 0001 000E         case portB:
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0001 000F             DDRB=0x00; // as input
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0001 0010             data_in=PINB;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0001 0011             break;
;PCODE: $00000021 VOL: 0
; 0001 0012         case portC:
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0001 0013             DDRC=0x00; // as input
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0001 0014             data_in=PINC;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0001 0015             break;
;PCODE: $00000029 VOL: 0
; 0001 0016         case portD:
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0001 0017             DDRD=0x00; // as input
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0001 0018             data_in=PIND;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0001 0019             break;
;PCODE: $00000031 VOL: 0
; 0001 001A     }
;PCODE: $00000032 VOL: 0
; 0001 001B     return data_in; // can be any data with unsigned int format
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0001 001C }
;PCODE: $00000038 VOL: 0
;
;
;void part2(char port_out, char data_out)
; 0001 0020 {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0001 0021     switch(port_out)
;PCODE: $0000003B VOL: 0
;	port_out -> Y+1
;	data_out -> Y+0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0001 0022     {
; 0001 0023         case portA:
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0001 0024             DDRA=0xFF; // as output
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0001 0025             PORTA=data_out;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0001 0026             break;
;PCODE: $00000044 VOL: 0
; 0001 0027         case portB:
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0001 0028             DDRB=0xFF; // as output
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0001 0029             PORTB=data_out;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0001 002A             break;
;PCODE: $0000004C VOL: 0
; 0001 002B         case portC:
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0001 002C             DDRC=0xFF; // as output
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0001 002D             PORTC=data_out;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0001 002E             break;
;PCODE: $00000054 VOL: 0
; 0001 002F         case portD:
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0001 0030             DDRD=0xFF; // as output
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0001 0031             PORTD=data_out;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0001 0032             break;
;PCODE: $0000005C VOL: 0
; 0001 0033     }
;PCODE: $0000005D VOL: 0
; 0001 0034 }
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;
;
;void part3(int number, int time)
; 0001 0038 {
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0001 0039     int i;
; 0001 003A     PORTB=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;	number -> Y+4
;	time -> Y+2
;	i -> R16,R17
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0001 003B     delay_ms(time);
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0001 003C 
; 0001 003D     for(i = 0; i < number; i++)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0001 003E     {
; 0001 003F         part2(portB, 0xFF);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0001 0040         delay_ms(time);
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0001 0041         part2(portB, 0x00);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0001 0042         delay_ms(time);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0001 0043     }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0001 0044 }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;
;
;void part4(void) {
; 0001 0047 void part4(void) {
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0001 0048     char data;
; 0001 0049     data = part1(portA);
;PCODE: $0000008D VOL: 0
;	data -> R17
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0001 004A     part2(portB,data);
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0001 004B }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;
;
;void part5(int data, int data_port, int enable_data) {
; 0001 004E void part5(int data, int data_port, int enable_data) {
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0001 004F     int i;
; 0001 0050     int digit[4];
; 0001 0051 
; 0001 0052     digit[0] = data/1000;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;	data -> Y+14
;	data_port -> Y+12
;	enable_data -> Y+10
;	i -> R16,R17
;	digit -> Y+2
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0001 0053     digit[1] = (data%1000)/100;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0001 0054     digit[2] = (data%100)/10;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0001 0055     digit[3] = data%10;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0001 0056 
; 0001 0057     for(i = 0; i < 4; i++) {
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0001 0058         switch(data_port)
;PCODE: $000000BD VOL: 0
; 0001 0059         {
; 0001 005A             case portA:
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0001 005B                 DDRA=0xFF; // as output
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0001 005C                 PORTA=num[digit[i]];
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0001 005D                 break ;
;PCODE: $000000CA VOL: 0
; 0001 005E             case portB:
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0001 005F                 DDRB=0xFF; // as output
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0001 0060                 PORTB=num[digit[i]];
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0001 0061                 break;
;PCODE: $000000D8 VOL: 0
; 0001 0062             case portC:
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0001 0063                 DDRC=0xFF; // as output
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0001 0064                 PORTC=num[digit[i]];
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0001 0065                 break;
;PCODE: $000000E6 VOL: 0
; 0001 0066             case portD:
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0001 0067                 DDRD=0xFF; // as output
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0001 0068                 PORTD=num[digit[i]];
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0001 0069                 break;
;PCODE: $000000F4 VOL: 0
; 0001 006A         }
;PCODE: $000000F5 VOL: 0
; 0001 006B 
; 0001 006C         switch(enable_data)
;PCODE: $000000F6 VOL: 0
; 0001 006D         {
; 0001 006E             case portA:
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0001 006F                 DDRA=0x0F; // as output
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0001 0070                 PORTA |= 0x0F;//Unable all ports
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0001 0071                 PORTA &= ~(1 << i);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0001 0072                 delay_ms(150);
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0001 0073                 PORTA |= (1 << i);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0001 0074                 break ;
;PCODE: $00000110 VOL: 0
; 0001 0075             case portB:
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0001 0076                 DDRB=0x0F; // as output
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0001 0077                 PORTB |= 0x0F;//Unable all ports
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0001 0078                 PORTB &= ~(1 << i);
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0001 0079                 delay_ms(150);
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0001 007A                 PORTB |= (1 << i);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0001 007B                 break;
;PCODE: $0000012B VOL: 0
; 0001 007C             case portC:
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0001 007D                 DDRC=0x0F; // as output
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0001 007E                 PORTC |= 0x0F;//Unable all ports
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0001 007F                 PORTC &= ~(1 << i);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0001 0080                 delay_ms(150);
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0001 0081                 PORTC |= (1 << i);
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0001 0082                 break;
;PCODE: $00000146 VOL: 0
; 0001 0083             case portD:
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0001 0084                 DDRD=0x0F; // as output
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0001 0085                 PORTD |= 0x0F;//Unable all ports
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0001 0086                 PORTD &= ~(1 << i);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0001 0087                 delay_ms(150);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
; 0001 0088                 PORTD |= (1 << i);
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0001 0089                 break;
;PCODE: $00000161 VOL: 0
; 0001 008A         }
;PCODE: $00000162 VOL: 0
; 0001 008B    }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0001 008C }
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;
;
