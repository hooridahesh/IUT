
AVRASM ver. 2.1.30  C:\Users\hoori\Desktop\Lab2-hoori dahesh\codevision\Debug\List\lab2.asm Wed Mar 13 13:12:22 2024

                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega16
                 ;Program type           : Application
                 ;Clock frequency        : 8/000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: No
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega16
                 	#pragma AVRPART MEMORY PROG_FLASH 16384
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 002f 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _num:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 
                 __RESET:
00002f 94f8      	CLI
000030 27ee      	CLR  R30
000031 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000032 e0f1      	LDI  R31,1
000033 bffb      	OUT  GICR,R31
000034 bfeb      	OUT  GICR,R30
000035 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000036 e08d      	LDI  R24,(14-2)+1
000037 e0a2      	LDI  R26,2
000038 27bb      	CLR  R27
                 __CLEAR_REG:
000039 93ed      	ST   X+,R30
00003a 958a      	DEC  R24
00003b f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00003c e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00003d e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00003e e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003f 93ed      	ST   X+,R30
000040 9701      	SBIW R24,1
000041 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000042 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000043 bfed      	OUT  SPL,R30
000044 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000045 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000046 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000047 e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000048 940c 004a 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x40
                 	.EQU __sm_mask=0xB0
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0xA0
                 	.EQU __sm_ext_standby=0xB0
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;void main(void)
                 ; 0000 0004 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0005     char data;
                 ; 0000 0006     data = part1(portA);
                 ;	data -> R17
00004a d13b      	RCALL SUBOPT_0x0
                 ; 0000 0007     part2(portB, data);
                 ; 0000 0008     delay_ms(500);
00004b d141      	RCALL SUBOPT_0x1
                 ; 0000 0009     part3(5, 350);
00004c e0e5      	LDI  R30,LOW(5)
00004d e0f0      	LDI  R31,HIGH(5)
00004e 93fa      	ST   -Y,R31
00004f 93ea      	ST   -Y,R30
000050 e5ae      	LDI  R26,LOW(350)
000051 e0b1      	LDI  R27,HIGH(350)
000052 d05d      	RCALL _part3
                 ; 0000 000A     delay_ms(500);
000053 d139      	RCALL SUBOPT_0x1
                 ; 0000 000B     part4();
000054 d07a      	RCALL _part4
                 ; 0000 000C     delay_ms(500);
000055 d137      	RCALL SUBOPT_0x1
                 ; 0000 000D     part5(9563, portC, portD);
000056 e5eb      	LDI  R30,LOW(9563)
000057 e2f5      	LDI  R31,HIGH(9563)
000058 93fa      	ST   -Y,R31
000059 93ea      	ST   -Y,R30
00005a e0e3      	LDI  R30,LOW(3)
00005b e0f0      	LDI  R31,HIGH(3)
00005c 93fa      	ST   -Y,R31
00005d 93ea      	ST   -Y,R30
00005e e0a4      	LDI  R26,LOW(4)
00005f e0b0      	LDI  R27,0
000060 d072      	RCALL _part5
                 ; 0000 000E }
                 _0x3:
000061 cfff      	RJMP _0x3
                 ; .FEND
                 ;#include <header.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 ;flash unsigned char num[]={0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D,0x07, 0x7F, 0x6F};
                 ;
                 ;
                 ;char part1(char port_in)
                 ; 0001 0006 {
                 
                 	.CSEG
                 _part1:
                 ; .FSTART _part1
                 ; 0001 0007     char data_in;
                 ; 0001 0008     switch(port_in)
000062 93aa      	ST   -Y,R26
000063 931a      	ST   -Y,R17
                 ;	port_in -> Y+1
                 ;	data_in -> R17
000064 81e9      	LDD  R30,Y+1
000065 e0f0      	LDI  R31,0
                 ; 0001 0009     {
                 ; 0001 000A         case portA:
000066 30e1      	CPI  R30,LOW(0x1)
000067 e0a0      	LDI  R26,HIGH(0x1)
000068 07fa      	CPC  R31,R26
000069 f421      	BRNE _0x20006
                 ; 0001 000B             DDRA=0x00; // as input
00006a e0e0      	LDI  R30,LOW(0)
00006b bbea      	OUT  0x1A,R30
                 ; 0001 000C             data_in=PINA;
00006c b319      	IN   R17,25
                 ; 0001 000D             break ;
00006d c017      	RJMP _0x20005
                 ; 0001 000E         case portB:
                 _0x20006:
00006e 30e2      	CPI  R30,LOW(0x2)
00006f e0a0      	LDI  R26,HIGH(0x2)
000070 07fa      	CPC  R31,R26
000071 f421      	BRNE _0x20007
                 ; 0001 000F             DDRB=0x00; // as input
000072 e0e0      	LDI  R30,LOW(0)
000073 bbe7      	OUT  0x17,R30
                 ; 0001 0010             data_in=PINB;
000074 b316      	IN   R17,22
                 ; 0001 0011             break;
000075 c00f      	RJMP _0x20005
                 ; 0001 0012         case portC:
                 _0x20007:
000076 30e3      	CPI  R30,LOW(0x3)
000077 e0a0      	LDI  R26,HIGH(0x3)
000078 07fa      	CPC  R31,R26
000079 f421      	BRNE _0x20008
                 ; 0001 0013             DDRC=0x00; // as input
00007a e0e0      	LDI  R30,LOW(0)
00007b bbe4      	OUT  0x14,R30
                 ; 0001 0014             data_in=PINC;
00007c b313      	IN   R17,19
                 ; 0001 0015             break;
00007d c007      	RJMP _0x20005
                 ; 0001 0016         case portD:
                 _0x20008:
00007e 30e4      	CPI  R30,LOW(0x4)
00007f e0a0      	LDI  R26,HIGH(0x4)
000080 07fa      	CPC  R31,R26
000081 f419      	BRNE _0x20005
                 ; 0001 0017             DDRD=0x00; // as input
000082 e0e0      	LDI  R30,LOW(0)
000083 bbe1      	OUT  0x11,R30
                 ; 0001 0018             data_in=PIND;
000084 b310      	IN   R17,16
                 ; 0001 0019             break;
                 ; 0001 001A     }
                 _0x20005:
                 ; 0001 001B     return data_in; // can be any data with unsigned int format
000085 2fe1      	MOV  R30,R17
000086 8118      	LDD  R17,Y+0
000087 c026      	RJMP _0x2000001
                 ; 0001 001C }
                 ; .FEND
                 ;
                 ;
                 ;void part2(char port_out, char data_out)
                 ; 0001 0020 {
                 _part2:
                 ; .FSTART _part2
                 ; 0001 0021     switch(port_out)
000088 93aa      	ST   -Y,R26
                 ;	port_out -> Y+1
                 ;	data_out -> Y+0
000089 81e9      	LDD  R30,Y+1
00008a e0f0      	LDI  R31,0
                 ; 0001 0022     {
                 ; 0001 0023         case portA:
00008b 30e1      	CPI  R30,LOW(0x1)
00008c e0a0      	LDI  R26,HIGH(0x1)
00008d 07fa      	CPC  R31,R26
00008e f429      	BRNE _0x2000D
                 ; 0001 0024             DDRA=0xFF; // as output
00008f efef      	LDI  R30,LOW(255)
000090 bbea      	OUT  0x1A,R30
                 ; 0001 0025             PORTA=data_out;
000091 81e8      	LD   R30,Y
000092 bbeb      	OUT  0x1B,R30
                 ; 0001 0026             break;
000093 c01a      	RJMP _0x2000C
                 ; 0001 0027         case portB:
                 _0x2000D:
000094 30e2      	CPI  R30,LOW(0x2)
000095 e0a0      	LDI  R26,HIGH(0x2)
000096 07fa      	CPC  R31,R26
000097 f429      	BRNE _0x2000E
                 ; 0001 0028             DDRB=0xFF; // as output
000098 efef      	LDI  R30,LOW(255)
000099 bbe7      	OUT  0x17,R30
                 ; 0001 0029             PORTB=data_out;
00009a 81e8      	LD   R30,Y
00009b bbe8      	OUT  0x18,R30
                 ; 0001 002A             break;
00009c c011      	RJMP _0x2000C
                 ; 0001 002B         case portC:
                 _0x2000E:
00009d 30e3      	CPI  R30,LOW(0x3)
00009e e0a0      	LDI  R26,HIGH(0x3)
00009f 07fa      	CPC  R31,R26
0000a0 f429      	BRNE _0x2000F
                 ; 0001 002C             DDRC=0xFF; // as output
0000a1 efef      	LDI  R30,LOW(255)
0000a2 bbe4      	OUT  0x14,R30
                 ; 0001 002D             PORTC=data_out;
0000a3 81e8      	LD   R30,Y
0000a4 bbe5      	OUT  0x15,R30
                 ; 0001 002E             break;
0000a5 c008      	RJMP _0x2000C
                 ; 0001 002F         case portD:
                 _0x2000F:
0000a6 30e4      	CPI  R30,LOW(0x4)
0000a7 e0a0      	LDI  R26,HIGH(0x4)
0000a8 07fa      	CPC  R31,R26
0000a9 f421      	BRNE _0x2000C
                 ; 0001 0030             DDRD=0xFF; // as output
0000aa efef      	LDI  R30,LOW(255)
0000ab bbe1      	OUT  0x11,R30
                 ; 0001 0031             PORTD=data_out;
0000ac 81e8      	LD   R30,Y
0000ad bbe2      	OUT  0x12,R30
                 ; 0001 0032             break;
                 ; 0001 0033     }
                 _0x2000C:
                 ; 0001 0034 }
                 _0x2000001:
0000ae 9622      	ADIW R28,2
0000af 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void part3(int number, int time)
                 ; 0001 0038 {
                 _part3:
                 ; .FSTART _part3
                 ; 0001 0039     int i;
                 ; 0001 003A     PORTB=0x00;
0000b0 93ba      	ST   -Y,R27
0000b1 93aa      	ST   -Y,R26
0000b2 931a      	ST   -Y,R17
0000b3 930a      	ST   -Y,R16
                 ;	number -> Y+4
                 ;	time -> Y+2
                 ;	i -> R16,R17
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 bbe8      	OUT  0x18,R30
                 ; 0001 003B     delay_ms(time);
0000b6 d0da      	RCALL SUBOPT_0x2
                 ; 0001 003C 
                 ; 0001 003D     for(i = 0; i < number; i++)
                +
0000b7 e000     +LDI R16 , LOW ( 0 )
0000b8 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20012:
0000b9 81ec      	LDD  R30,Y+4
0000ba 81fd      	LDD  R31,Y+4+1
0000bb 170e      	CP   R16,R30
0000bc 071f      	CPC  R17,R31
0000bd f46c      	BRGE _0x20013
                 ; 0001 003E     {
                 ; 0001 003F         part2(portB, 0xFF);
0000be e0e2      	LDI  R30,LOW(2)
0000bf 93ea      	ST   -Y,R30
0000c0 efaf      	LDI  R26,LOW(255)
0000c1 dfc6      	RCALL _part2
                 ; 0001 0040         delay_ms(time);
0000c2 d0ce      	RCALL SUBOPT_0x2
                 ; 0001 0041         part2(portB, 0x00);
0000c3 e0e2      	LDI  R30,LOW(2)
0000c4 93ea      	ST   -Y,R30
0000c5 e0a0      	LDI  R26,LOW(0)
0000c6 dfc1      	RCALL _part2
                 ; 0001 0042         delay_ms(time);
0000c7 d0c9      	RCALL SUBOPT_0x2
                 ; 0001 0043     }
                +
0000c8 5f0f     +SUBI R16 , LOW ( - 1 )
0000c9 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
0000ca cfee      	RJMP _0x20012
                 _0x20013:
                 ; 0001 0044 }
0000cb 8119      	LDD  R17,Y+1
0000cc 8108      	LDD  R16,Y+0
0000cd 9626      	ADIW R28,6
0000ce 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void part4(void) {
                 ; 0001 0047 void part4(void) {
                 _part4:
                 ; .FSTART _part4
                 ; 0001 0048     char data;
                 ; 0001 0049     data = part1(portA);
0000cf 931a      	ST   -Y,R17
                 ;	data -> R17
0000d0 d0b5      	RCALL SUBOPT_0x0
                 ; 0001 004A     part2(portB,data);
                 ; 0001 004B }
0000d1 9119      	LD   R17,Y+
0000d2 9508      	RET
                 ; .FEND
                 ;
                 ;
                 ;void part5(int data, int data_port, int enable_data) {
                 ; 0001 004E void part5(int data, int data_port, int enable_data) {
                 _part5:
                 ; .FSTART _part5
                 ; 0001 004F     int i;
                 ; 0001 0050     int digit[4];
                 ; 0001 0051 
                 ; 0001 0052     digit[0] = data/1000;
0000d3 93ba      	ST   -Y,R27
0000d4 93aa      	ST   -Y,R26
0000d5 9728      	SBIW R28,8
0000d6 931a      	ST   -Y,R17
0000d7 930a      	ST   -Y,R16
                 ;	data -> Y+14
                 ;	data_port -> Y+12
                 ;	enable_data -> Y+10
                 ;	i -> R16,R17
                 ;	digit -> Y+2
0000d8 85ae      	LDD  R26,Y+14
0000d9 85bf      	LDD  R27,Y+14+1
0000da eee8      	LDI  R30,LOW(1000)
0000db e0f3      	LDI  R31,HIGH(1000)
0000dc 940e 01d4 	CALL __DIVW21
0000de 83ea      	STD  Y+2,R30
0000df 83fb      	STD  Y+2+1,R31
                 ; 0001 0053     digit[1] = (data%1000)/100;
0000e0 85ae      	LDD  R26,Y+14
0000e1 85bf      	LDD  R27,Y+14+1
0000e2 eee8      	LDI  R30,LOW(1000)
0000e3 e0f3      	LDI  R31,HIGH(1000)
0000e4 940e 01d9 	CALL __MODW21
0000e6 01df      	MOVW R26,R30
0000e7 e6e4      	LDI  R30,LOW(100)
0000e8 e0f0      	LDI  R31,HIGH(100)
0000e9 940e 01d4 	CALL __DIVW21
0000eb 83ec      	STD  Y+4,R30
0000ec 83fd      	STD  Y+4+1,R31
                 ; 0001 0054     digit[2] = (data%100)/10;
0000ed 85ae      	LDD  R26,Y+14
0000ee 85bf      	LDD  R27,Y+14+1
0000ef e6e4      	LDI  R30,LOW(100)
0000f0 e0f0      	LDI  R31,HIGH(100)
0000f1 940e 01d9 	CALL __MODW21
0000f3 01df      	MOVW R26,R30
0000f4 e0ea      	LDI  R30,LOW(10)
0000f5 e0f0      	LDI  R31,HIGH(10)
0000f6 940e 01d4 	CALL __DIVW21
0000f8 83ee      	STD  Y+6,R30
0000f9 83ff      	STD  Y+6+1,R31
                 ; 0001 0055     digit[3] = data%10;
0000fa 85ae      	LDD  R26,Y+14
0000fb 85bf      	LDD  R27,Y+14+1
0000fc e0ea      	LDI  R30,LOW(10)
0000fd e0f0      	LDI  R31,HIGH(10)
0000fe 940e 01d9 	CALL __MODW21
000100 87e8      	STD  Y+8,R30
000101 87f9      	STD  Y+8+1,R31
                 ; 0001 0056 
                 ; 0001 0057     for(i = 0; i < 4; i++) {
                +
000102 e000     +LDI R16 , LOW ( 0 )
000103 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
                 _0x20015:
                +
000104 3004     +CPI R16 , LOW ( 4 )
000105 e0e0     +LDI R30 , HIGH ( 4 )
000106 071e     +CPC R17 , R30
                 	__CPWRN 16,17,4
000107 f00c      	BRLT PC+2
000108 c079      	RJMP _0x20016
                 ; 0001 0058         switch(data_port)
000109 85ec      	LDD  R30,Y+12
00010a 85fd      	LDD  R31,Y+12+1
                 ; 0001 0059         {
                 ; 0001 005A             case portA:
00010b 30e1      	CPI  R30,LOW(0x1)
00010c e0a0      	LDI  R26,HIGH(0x1)
00010d 07fa      	CPC  R31,R26
00010e f429      	BRNE _0x2001A
                 ; 0001 005B                 DDRA=0xFF; // as output
00010f efef      	LDI  R30,LOW(255)
000110 bbea      	OUT  0x1A,R30
                 ; 0001 005C                 PORTA=num[digit[i]];
000111 d083      	RCALL SUBOPT_0x3
000112 ba0b      	OUT  0x1B,R0
                 ; 0001 005D                 break ;
000113 c01a      	RJMP _0x20019
                 ; 0001 005E             case portB:
                 _0x2001A:
000114 30e2      	CPI  R30,LOW(0x2)
000115 e0a0      	LDI  R26,HIGH(0x2)
000116 07fa      	CPC  R31,R26
000117 f429      	BRNE _0x2001B
                 ; 0001 005F                 DDRB=0xFF; // as output
000118 efef      	LDI  R30,LOW(255)
000119 bbe7      	OUT  0x17,R30
                 ; 0001 0060                 PORTB=num[digit[i]];
00011a d07a      	RCALL SUBOPT_0x3
00011b ba08      	OUT  0x18,R0
                 ; 0001 0061                 break;
00011c c011      	RJMP _0x20019
                 ; 0001 0062             case portC:
                 _0x2001B:
00011d 30e3      	CPI  R30,LOW(0x3)
00011e e0a0      	LDI  R26,HIGH(0x3)
00011f 07fa      	CPC  R31,R26
000120 f429      	BRNE _0x2001C
                 ; 0001 0063                 DDRC=0xFF; // as output
000121 efef      	LDI  R30,LOW(255)
000122 bbe4      	OUT  0x14,R30
                 ; 0001 0064                 PORTC=num[digit[i]];
000123 d071      	RCALL SUBOPT_0x3
000124 ba05      	OUT  0x15,R0
                 ; 0001 0065                 break;
000125 c008      	RJMP _0x20019
                 ; 0001 0066             case portD:
                 _0x2001C:
000126 30e4      	CPI  R30,LOW(0x4)
000127 e0a0      	LDI  R26,HIGH(0x4)
000128 07fa      	CPC  R31,R26
000129 f421      	BRNE _0x20019
                 ; 0001 0067                 DDRD=0xFF; // as output
00012a efef      	LDI  R30,LOW(255)
00012b bbe1      	OUT  0x11,R30
                 ; 0001 0068                 PORTD=num[digit[i]];
00012c d068      	RCALL SUBOPT_0x3
00012d ba02      	OUT  0x12,R0
                 ; 0001 0069                 break;
                 ; 0001 006A         }
                 _0x20019:
                 ; 0001 006B 
                 ; 0001 006C         switch(enable_data)
00012e 85ea      	LDD  R30,Y+10
00012f 85fb      	LDD  R31,Y+10+1
                 ; 0001 006D         {
                 ; 0001 006E             case portA:
000130 30e1      	CPI  R30,LOW(0x1)
000131 e0a0      	LDI  R26,HIGH(0x1)
000132 07fa      	CPC  R31,R26
000133 f481      	BRNE _0x20021
                 ; 0001 006F                 DDRA=0x0F; // as output
000134 e0ef      	LDI  R30,LOW(15)
000135 bbea      	OUT  0x1A,R30
                 ; 0001 0070                 PORTA |= 0x0F;//Unable all ports
000136 b3eb      	IN   R30,0x1B
000137 60ef      	ORI  R30,LOW(0xF)
000138 bbeb      	OUT  0x1B,R30
                 ; 0001 0071                 PORTA &= ~(1 << i);
000139 b21b      	IN   R1,27
00013a d067      	RCALL SUBOPT_0x4
00013b 95e0      	COM  R30
00013c 21e1      	AND  R30,R1
00013d bbeb      	OUT  0x1B,R30
                 ; 0001 0072                 delay_ms(150);
00013e d068      	RCALL SUBOPT_0x5
                 ; 0001 0073                 PORTA |= (1 << i);
00013f b21b      	IN   R1,27
000140 d061      	RCALL SUBOPT_0x4
000141 29e1      	OR   R30,R1
000142 bbeb      	OUT  0x1B,R30
                 ; 0001 0074                 break ;
000143 c03b      	RJMP _0x20020
                 ; 0001 0075             case portB:
                 _0x20021:
000144 30e2      	CPI  R30,LOW(0x2)
000145 e0a0      	LDI  R26,HIGH(0x2)
000146 07fa      	CPC  R31,R26
000147 f481      	BRNE _0x20022
                 ; 0001 0076                 DDRB=0x0F; // as output
000148 e0ef      	LDI  R30,LOW(15)
000149 bbe7      	OUT  0x17,R30
                 ; 0001 0077                 PORTB |= 0x0F;//Unable all ports
00014a b3e8      	IN   R30,0x18
00014b 60ef      	ORI  R30,LOW(0xF)
00014c bbe8      	OUT  0x18,R30
                 ; 0001 0078                 PORTB &= ~(1 << i);
00014d b218      	IN   R1,24
00014e d053      	RCALL SUBOPT_0x4
00014f 95e0      	COM  R30
000150 21e1      	AND  R30,R1
000151 bbe8      	OUT  0x18,R30
                 ; 0001 0079                 delay_ms(150);
000152 d054      	RCALL SUBOPT_0x5
                 ; 0001 007A                 PORTB |= (1 << i);
000153 b218      	IN   R1,24
000154 d04d      	RCALL SUBOPT_0x4
000155 29e1      	OR   R30,R1
000156 bbe8      	OUT  0x18,R30
                 ; 0001 007B                 break;
000157 c027      	RJMP _0x20020
                 ; 0001 007C             case portC:
                 _0x20022:
000158 30e3      	CPI  R30,LOW(0x3)
000159 e0a0      	LDI  R26,HIGH(0x3)
00015a 07fa      	CPC  R31,R26
00015b f481      	BRNE _0x20023
                 ; 0001 007D                 DDRC=0x0F; // as output
00015c e0ef      	LDI  R30,LOW(15)
00015d bbe4      	OUT  0x14,R30
                 ; 0001 007E                 PORTC |= 0x0F;//Unable all ports
00015e b3e5      	IN   R30,0x15
00015f 60ef      	ORI  R30,LOW(0xF)
000160 bbe5      	OUT  0x15,R30
                 ; 0001 007F                 PORTC &= ~(1 << i);
000161 b215      	IN   R1,21
000162 d03f      	RCALL SUBOPT_0x4
000163 95e0      	COM  R30
000164 21e1      	AND  R30,R1
000165 bbe5      	OUT  0x15,R30
                 ; 0001 0080                 delay_ms(150);
000166 d040      	RCALL SUBOPT_0x5
                 ; 0001 0081                 PORTC |= (1 << i);
000167 b215      	IN   R1,21
000168 d039      	RCALL SUBOPT_0x4
000169 29e1      	OR   R30,R1
00016a bbe5      	OUT  0x15,R30
                 ; 0001 0082                 break;
00016b c013      	RJMP _0x20020
                 ; 0001 0083             case portD:
                 _0x20023:
00016c 30e4      	CPI  R30,LOW(0x4)
00016d e0a0      	LDI  R26,HIGH(0x4)
00016e 07fa      	CPC  R31,R26
00016f f479      	BRNE _0x20020
                 ; 0001 0084                 DDRD=0x0F; // as output
000170 e0ef      	LDI  R30,LOW(15)
000171 bbe1      	OUT  0x11,R30
                 ; 0001 0085                 PORTD |= 0x0F;//Unable all ports
000172 b3e2      	IN   R30,0x12
000173 60ef      	ORI  R30,LOW(0xF)
000174 bbe2      	OUT  0x12,R30
                 ; 0001 0086                 PORTD &= ~(1 << i);
000175 b212      	IN   R1,18
000176 d02b      	RCALL SUBOPT_0x4
000177 95e0      	COM  R30
000178 21e1      	AND  R30,R1
000179 bbe2      	OUT  0x12,R30
                 ; 0001 0087                 delay_ms(150);
00017a d02c      	RCALL SUBOPT_0x5
                 ; 0001 0088                 PORTD |= (1 << i);
00017b b212      	IN   R1,18
00017c d025      	RCALL SUBOPT_0x4
00017d 29e1      	OR   R30,R1
00017e bbe2      	OUT  0x12,R30
                 ; 0001 0089                 break;
                 ; 0001 008A         }
                 _0x20020:
                 ; 0001 008B    }
                +
00017f 5f0f     +SUBI R16 , LOW ( - 1 )
000180 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
000181 cf82      	RJMP _0x20015
                 _0x20016:
                 ; 0001 008C }
000182 8119      	LDD  R17,Y+1
000183 8108      	LDD  R16,Y+0
000184 9660      	ADIW R28,16
000185 9508      	RET
                 ; .FEND
                 ;
                 ;
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x0:
000186 e0a1      	LDI  R26,LOW(1)
000187 deda      	RCALL _part1
000188 2f1e      	MOV  R17,R30
000189 e0e2      	LDI  R30,LOW(2)
00018a 93ea      	ST   -Y,R30
00018b 2fa1      	MOV  R26,R17
00018c cefb      	RJMP _part2
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
00018d efa4      	LDI  R26,LOW(500)
00018e e0b1      	LDI  R27,HIGH(500)
00018f 940c 01ab 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000191 81aa      	LDD  R26,Y+2
000192 81bb      	LDD  R27,Y+2+1
000193 940c 01ab 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:27 WORDS
                 SUBOPT_0x3:
000195 01f8      	MOVW R30,R16
000196 01de      	MOVW R26,R28
000197 9612      	ADIW R26,2
000198 0fee      	LSL  R30
000199 1fff      	ROL  R31
00019a 0fae      	ADD  R26,R30
00019b 1fbf      	ADC  R27,R31
00019c 940e 01f5 	CALL __GETW1P
00019e 5aec      	SUBI R30,LOW(-_num*2)
00019f 4fff      	SBCI R31,HIGH(-_num*2)
0001a0 9004      	LPM  R0,Z
0001a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x4:
0001a2 2fe0      	MOV  R30,R16
0001a3 e0a1      	LDI  R26,LOW(1)
0001a4 940e 01b9 	CALL __LSLB12
0001a6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x5:
0001a7 e9a6      	LDI  R26,LOW(150)
0001a8 e0b0      	LDI  R27,0
0001a9 940c 01ab 	JMP  _delay_ms
                 
                 
                 	.CSEG
                 _delay_ms:
0001ab 9610      	adiw r26,0
0001ac f039      	breq __delay_ms1
                 __delay_ms0:
                +
0001ad ed80     +LDI R24 , LOW ( 0x7D0 )
0001ae e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0001af 9701     +SBIW R24 , 1
0001b0 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0001b1 95a8      	wdr
0001b2 9711      	sbiw r26,1
0001b3 f7c9      	brne __delay_ms0
                 __delay_ms1:
0001b4 9508      	ret
                 
                 __ANEGW1:
0001b5 95f1      	NEG  R31
0001b6 95e1      	NEG  R30
0001b7 40f0      	SBCI R31,0
0001b8 9508      	RET
                 
                 __LSLB12:
0001b9 23ee      	TST  R30
0001ba 2e0e      	MOV  R0,R30
0001bb 2fea      	MOV  R30,R26
0001bc f019      	BREQ __LSLB12R
                 __LSLB12L:
0001bd 0fee      	LSL  R30
0001be 940a      	DEC  R0
0001bf f7e9      	BRNE __LSLB12L
                 __LSLB12R:
0001c0 9508      	RET
                 
                 __DIVW21U:
0001c1 2400      	CLR  R0
0001c2 2411      	CLR  R1
0001c3 e190      	LDI  R25,16
                 __DIVW21U1:
0001c4 0faa      	LSL  R26
0001c5 1fbb      	ROL  R27
0001c6 1c00      	ROL  R0
0001c7 1c11      	ROL  R1
0001c8 1a0e      	SUB  R0,R30
0001c9 0a1f      	SBC  R1,R31
0001ca f418      	BRCC __DIVW21U2
0001cb 0e0e      	ADD  R0,R30
0001cc 1e1f      	ADC  R1,R31
0001cd c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001ce 60a1      	SBR  R26,1
                 __DIVW21U3:
0001cf 959a      	DEC  R25
0001d0 f799      	BRNE __DIVW21U1
0001d1 01fd      	MOVW R30,R26
0001d2 01d0      	MOVW R26,R0
0001d3 9508      	RET
                 
                 __DIVW21:
0001d4 d012      	RCALL __CHKSIGNW
0001d5 dfeb      	RCALL __DIVW21U
0001d6 f40e      	BRTC __DIVW211
0001d7 dfdd      	RCALL __ANEGW1
                 __DIVW211:
0001d8 9508      	RET
                 
                 __MODW21:
0001d9 94e8      	CLT
0001da ffb7      	SBRS R27,7
0001db c004      	RJMP __MODW211
0001dc 95a0      	COM  R26
0001dd 95b0      	COM  R27
0001de 9611      	ADIW R26,1
0001df 9468      	SET
                 __MODW211:
0001e0 fdf7      	SBRC R31,7
0001e1 dfd3      	RCALL __ANEGW1
0001e2 dfde      	RCALL __DIVW21U
0001e3 01fd      	MOVW R30,R26
0001e4 f40e      	BRTC __MODW212
0001e5 dfcf      	RCALL __ANEGW1
                 __MODW212:
0001e6 9508      	RET
                 
                 __CHKSIGNW:
0001e7 94e8      	CLT
0001e8 fff7      	SBRS R31,7
0001e9 c002      	RJMP __CHKSW1
0001ea dfca      	RCALL __ANEGW1
0001eb 9468      	SET
                 __CHKSW1:
0001ec ffb7      	SBRS R27,7
0001ed c006      	RJMP __CHKSW2
0001ee 95a0      	COM  R26
0001ef 95b0      	COM  R27
0001f0 9611      	ADIW R26,1
0001f1 f800      	BLD  R0,0
0001f2 9403      	INC  R0
0001f3 fa00      	BST  R0,0
                 __CHKSW2:
0001f4 9508      	RET
                 
                 __GETW1P:
0001f5 91ed      	LD   R30,X+
0001f6 91fc      	LD   R31,X
0001f7 9711      	SBIW R26,1
0001f8 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega16 register use summary:
r0 :  15 r1 :  20 r2 :   0 r3 :   0 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:  12 r17:  21 r18:   0 r19:   0 r20:   0 r21:   0 r22:   0 r23:   0 
r24:   6 r25:   4 r26:  70 r27:  18 r28:   6 r29:   1 r30: 149 r31:  50 
x  :   4 y  :  57 z  :   1 
Registers used: 15 out of 35 (42.9%)

ATmega16 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   2 add   :   2 
adiw  :   7 and   :   4 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   1 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   1 brmi  :   0 brne  :  22 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   8 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   8 
cp    :   1 cpc   :  18 cpi   :  17 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  16 inc   :   1 jmp   :  25 ld    :   7 ldd   :  23 ldi   :  86 
lds   :   0 lpm   :   2 lsl   :   3 lsr   :   0 mov   :   6 movw  :   7 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   4 
ori   :   4 out   :  43 pop   :   0 push  :   0 rcall :  37 ret   :  14 
reti  :   0 rjmp  :  22 rol   :   4 ror   :   0 sbc   :   1 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  23 std   :   8 sts   :   0 sub   :   1 subi  :   3 swap  :   0 
tst   :   1 wdr   :   1 
Instructions used: 52 out of 116 (44.8%)

ATmega16 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003f2   1000     10   1010   16384   6.2%
[.dseg] 0x000060 0x000160      0      0      0    1024   0.0%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 0 warnings
