;#include <headers.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Declare your global variables here
;const unsigned short ra[] = {
;    // 32 numbers =>index = [0,31]
;    0x00, 0x32, 0x48, 0x48, 0x48, 0x30, 0x00, 0x00, // Code for char r
;    0x00, 0x3E, 0x09, 0x09, 0x09, 0x3E, 0x00, 0x00, // Code for char a
;    0x00, 0x7C, 0x10, 0x10, 0x10, 0x7C, 0x00, 0x00, // Code for char h
;    0x00, 0x3E, 0x49, 0x49, 0x49, 0x36, 0x00, 0x00, // Code for char d
;};
;int i, j;
;int hour = 0, minute = 30, second = 0;
;
;void subRoutine1(void)
; 0002 000F {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0002 0010     for (i = 0 ; i < 16 ; i++) {
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0002 0011         for (j = i ; j < i + 16 ; j++) {
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0002 0012             PORTD.7 = ((j-i)<8) ? 0 : 1 ;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0002 0013             PORTA = pow(2, (j-i)%8);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0002 0014             PORTB = ra[j];
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0002 0015             delay_ms(3);
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0002 0016         }
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0002 0017     }
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0002 0018 }
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;
;void subRoutine2()
; 0002 001B {
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0002 001C     glcd_putimagef(0, 0, new_image, GLCD_PUTCOPY);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0002 001D }
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;
;float degreeToRadian(float degree)
; 0002 0020 {
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0002 0021     return degree * (3.14 / 180.0);
;PCODE: $00000068 VOL: 0
;	degree -> Y+0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0002 0022 }
;PCODE: $0000006E VOL: 0
;
;int getX2(int x1, int amount, char unit)
; 0002 0025 {
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0002 0026     int x2;
; 0002 0027 
; 0002 0028     switch (unit)
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;	x1 -> Y+5
;	amount -> Y+3
;	unit -> Y+2
;	x2 -> R16,R17
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0002 0029     {
; 0002 002A     case 's': // second
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0002 002B         x2 = x1 + (27 * sin(degreeToRadian(6 * amount)));
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0002 002C         break;
;PCODE: $00000087 VOL: 0
; 0002 002D 
; 0002 002E     case 'm': // minute
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0002 002F         x2 = x1 + (23 * sin(degreeToRadian(6 * amount)));
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0002 0030         break;
;PCODE: $0000009A VOL: 0
; 0002 0031 
; 0002 0032     case 'h': // hour
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0002 0033         x2 = x1 + (18 * sin(degreeToRadian(30 * amount)));
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0002 0034         break;
;PCODE: $000000AD VOL: 0
; 0002 0035 
; 0002 0036     default:
;PCODE: $000000AE VOL: 0
; 0002 0037         break;
;PCODE: $000000AF VOL: 0
; 0002 0038     }
;PCODE: $000000B0 VOL: 0
; 0002 0039 
; 0002 003A     return x2;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0002 003B }
;PCODE: $000000B8 VOL: 0
;
;int getY2(int y1, int amount, char unit)
; 0002 003E {
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0002 003F     int y2;
; 0002 0040 
; 0002 0041     switch (unit)
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;	y1 -> Y+5
;	amount -> Y+3
;	unit -> Y+2
;	y2 -> R16,R17
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0002 0042     {
; 0002 0043     case 's': // second
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0002 0044         y2 = y1 - (27 * cos(degreeToRadian(6 * amount)));
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0002 0045         break;
;PCODE: $000000D2 VOL: 0
; 0002 0046 
; 0002 0047     case 'm': // minute
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0002 0048         y2 = y1 - (23 * cos(degreeToRadian(6 * amount)));
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0002 0049         break;
;PCODE: $000000E6 VOL: 0
; 0002 004A 
; 0002 004B     case 'h': // hour
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0002 004C         y2 = y1 - (18 * cos(degreeToRadian(30 * amount)));
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0002 004D         break;
;PCODE: $000000FA VOL: 0
; 0002 004E 
; 0002 004F     default:
;PCODE: $000000FB VOL: 0
; 0002 0050         break;
;PCODE: $000000FC VOL: 0
; 0002 0051     }
;PCODE: $000000FD VOL: 0
; 0002 0052 
; 0002 0053     return y2;
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0002 0054 }
;PCODE: $00000105 VOL: 0
;
;void drawLines(int amount, char unit)
; 0002 0057 {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0002 0058     int x1=32, x2, y1=31, y2;
; 0002 0059 
; 0002 005A     switch (unit)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;	amount -> Y+9
;	unit -> Y+8
;	x1 -> R16,R17
;	x2 -> R18,R19
;	y1 -> R20,R21
;	y2 -> Y+6
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0002 005B     {
; 0002 005C     case 's': //second
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0002 005D         x2 = getX2(x1, amount, 's');
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0002 005E         y2 = getY2(y1, amount, 's');
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0002 005F         break;
;PCODE: $0000011F VOL: 0
; 0002 0060 
; 0002 0061     case 'm': //minute
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0002 0062         x2 = getX2(x1, amount, 'm');
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0002 0063         y2 = getY2(y1, amount, 'm');
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0002 0064         break;
;PCODE: $0000012F VOL: 0
; 0002 0065 
; 0002 0066     case 'h': //hour
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0002 0067         x2 = getX2(x1, amount, 'h');
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0002 0068         y2 = getY2(y1, amount, 'h');
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0002 0069         break;
;PCODE: $0000013F VOL: 0
; 0002 006A 
; 0002 006B     default:
;PCODE: $00000140 VOL: 0
; 0002 006C         break;
;PCODE: $00000141 VOL: 0
; 0002 006D     }
;PCODE: $00000142 VOL: 0
; 0002 006E 
; 0002 006F     glcd_line(x1, y1, x2, y2);
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0002 0070 }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;
;interrupt[TIM1_OVF] void timer1_ovf_isr(void)
; 0002 0073 {
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0002 0074     // Reinitialize Timer1 value
; 0002 0075     TCNT1H = 0x85EE >> 8;
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0002 0076     TCNT1L = 0x85EE & 0xff;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0002 0077 
; 0002 0078     second++;
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0002 0079     if (second == 60)
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0002 007A     {
; 0002 007B         second = 0;
;PCODE: $00000158 VOL: 0
; 0002 007C         minute++;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0002 007D         if (minute == 60)
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
; 0002 007E         {
; 0002 007F             minute = 0;
;PCODE: $0000015F VOL: 0
; 0002 0080             hour++;
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0002 0081             if (hour == 12)
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
; 0002 0082             {
; 0002 0083                 hour = 0;
;PCODE: $00000166 VOL: 0
; 0002 0084             }
; 0002 0085         }
;PCODE: $00000167 VOL: 0
; 0002 0086     }
;PCODE: $00000168 VOL: 0
; 0002 0087     updateClock();
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0002 0088 }
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;
;void updateClock()
; 0002 008B {
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0002 008C     glcd_clear();
;PCODE: $00000170 VOL: 0
; 0002 008D     drawLines(second, 's');
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
; 0002 008E     drawLines(minute, 'm');
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0002 008F     drawLines(hour, 'h');
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0002 0090 
; 0002 0091     glcd_outtextxy(30, 50, " ");
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0002 0092     glcd_outtextxy(30, 50, "6");
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0002 0093     glcd_outtextxy(54, 30, "3");
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0002 0094     glcd_outtextxy(4, 31, "9");
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0002 0095     glcd_outtextxy(27, 3, "12");
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0002 0096     glcd_circle(32, 31, 30);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0002 0097 }
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0

	.DSEG
_0x40026:
	.BYTE 0xB
;
;void subRoutine3()
; 0002 009A {

	.CSEG
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0002 009B #asm("sei");
;PCODE: $000001A7 VOL: 0
	sei
;PCODE: $000001A8 VOL: 0
; 0002 009C     updateClock();
;PCODE: $000001A9 VOL: 0
; 0002 009D }
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;
;void init(void){
; 0002 009F void init(void){
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0002 00A0 
; 0002 00A1 // Variable used to store graphic display
; 0002 00A2 // controller initialization data
; 0002 00A3 GLCDINIT_t glcd_init_data;
; 0002 00A4 
; 0002 00A5 // Input/Output Ports initialization
; 0002 00A6 // Port A initialization
; 0002 00A7 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0002 00A8 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $000001AE VOL: 0
;	glcd_init_data -> Y+0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0002 00A9 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0002 00AA PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0002 00AB 
; 0002 00AC // Port B initialization
; 0002 00AD // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0002 00AE DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
; 0002 00AF // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0002 00B0 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0002 00B1 
; 0002 00B2 // Port C initialization
; 0002 00B3 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0002 00B4 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0002 00B5 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0002 00B6 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0002 00B7 
; 0002 00B8 // Port D initialization
; 0002 00B9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0002 00BA DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0002 00BB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0002 00BC PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0002 00BD 
; 0002 00BE // Timer/Counter 0 initialization
; 0002 00BF // Clock source: System Clock
; 0002 00C0 // Clock value: Timer 0 Stopped
; 0002 00C1 // Mode: Normal top=0xFF
; 0002 00C2 // OC0 output: Disconnected
; 0002 00C3 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0002 00C4 TCNT0=0x00;
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0002 00C5 OCR0=0x00;
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0002 00C6 
; 0002 00C7 // Timer/Counter 1 initialization
; 0002 00C8 // Clock source: System Clock
; 0002 00C9 // Clock value: Timer1 Stopped
; 0002 00CA // Mode: Normal top=0xFFFF
; 0002 00CB // OC1A output: Disconnected
; 0002 00CC // OC1B output: Disconnected
; 0002 00CD // Noise Canceler: Off
; 0002 00CE // Input Capture on Falling Edge
; 0002 00CF // Timer1 Overflow Interrupt: Off
; 0002 00D0 // Input Capture Interrupt: Off
; 0002 00D1 // Compare A Match Interrupt: Off
; 0002 00D2 // Compare B Match Interrupt: Off
; 0002 00D3 TCCR1A = (0 << COM1A1) | (0 << COM1A0) | (0 << COM1B1) | (0 << COM1B0) | (0 << WGM11) | (0 << WGM10);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
; 0002 00D4 TCCR1B = (0 << ICNC1) | (0 << ICES1) | (0 << WGM13) | (0 << WGM12) | (1 << CS12) | (0 << CS11) | (0 << CS10);
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0002 00D5 TCNT1H = 0x85;
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0002 00D6 TCNT1L = 0xEE;
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0002 00D7 ICR1H = 0x00;
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0002 00D8 ICR1L = 0x00;
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
; 0002 00D9 OCR1AH = 0x00;
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0002 00DA OCR1AL = 0x00;
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0002 00DB OCR1BH = 0x00;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0002 00DC OCR1BL = 0x00;
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0002 00DD 
; 0002 00DE //Timer(s)/Counter(s) Interrupt(s) initialization
; 0002 00DF TIMSK = (0 << OCIE2) | (0 << TOIE2) | (0 << TICIE1) | (0 << OCIE1A) | (0 << OCIE1B) | (1 << TOIE1) | (0 << OCIE0) | (0 < ...
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0002 00E0 
; 0002 00E1 
; 0002 00E2 // External Interrupt(s) initialization
; 0002 00E3 // INT0: Off
; 0002 00E4 // INT1: Off
; 0002 00E5 // INT2: Off
; 0002 00E6 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0002 00E7 MCUCSR=(0<<ISC2);
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0002 00E8 
; 0002 00E9 // USART initialization
; 0002 00EA // USART disabled
; 0002 00EB UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0002 00EC 
; 0002 00ED // Analog Comparator initialization
; 0002 00EE // Analog Comparator: Off
; 0002 00EF // The Analog Comparator's positive input is
; 0002 00F0 // connected to the AIN0 pin
; 0002 00F1 // The Analog Comparator's negative input is
; 0002 00F2 // connected to the AIN1 pin
; 0002 00F3 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0002 00F4 SFIOR=(0<<ACME);
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0002 00F5 
; 0002 00F6 // ADC initialization
; 0002 00F7 // ADC disabled
; 0002 00F8 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0002 00F9 
; 0002 00FA // SPI initialization
; 0002 00FB // SPI disabled
; 0002 00FC SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0002 00FD 
; 0002 00FE // TWI initialization
; 0002 00FF // TWI disabled
; 0002 0100 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0002 0101 
; 0002 0102 // Graphic Display Controller initialization
; 0002 0103 // The KS0108 connections are specified in the
; 0002 0104 // Project|Configure|C Compiler|Libraries|Graphic Display menu:
; 0002 0105 // DB0 - PORTC Bit 0
; 0002 0106 // DB1 - PORTC Bit 1
; 0002 0107 // DB2 - PORTC Bit 2
; 0002 0108 // DB3 - PORTC Bit 3
; 0002 0109 // DB4 - PORTC Bit 4
; 0002 010A // DB5 - PORTC Bit 5
; 0002 010B // DB6 - PORTC Bit 6
; 0002 010C // DB7 - PORTC Bit 7
; 0002 010D // E - PORTD Bit 0
; 0002 010E // RD /WR - PORTD Bit 1
; 0002 010F // RS - PORTD Bit 2
; 0002 0110 // /RST - PORTD Bit 3
; 0002 0111 // CS1 - PORTD Bit 4
; 0002 0112 // CS2 - PORTD Bit 5
; 0002 0113 
; 0002 0114 // Specify the current font for displaying text
; 0002 0115 glcd_init_data.font=font5x7;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0002 0116 // No function is used for reading
; 0002 0117 // image data from external memory
; 0002 0118 glcd_init_data.readxmem=NULL;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0002 0119 // No function is used for writing
; 0002 011A // image data to external memory
; 0002 011B glcd_init_data.writexmem=NULL;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0002 011C 
; 0002 011D glcd_init(&glcd_init_data);
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0002 011E 
; 0002 011F }
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
